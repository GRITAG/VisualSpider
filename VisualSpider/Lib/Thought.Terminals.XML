<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Thought.Terminals</name>
    </assembly>
    <members>
        <member name="T:Thought.Terminals.AsciiControlChar">
            <summary>
                Provides aliases for ASCII control characters (e.g.
                control A, control P, etc).
            </summary>
            
            <remarks>
            
                <para>
                    The majority of the ASCII control characters are
                    obsolete; however, they have been used for other
                    purposes (such as prefixes for custom color codes) and
                    are defined here for easy access.
                </para>
            
            </remarks>
            
            <seealso cref="T:Thought.Terminals.AsciiByte"/>
            <seealso cref="T:Thought.Terminals.AsciiChar"/>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlAt">
            <summary>
                Represents a ^@ (ASCII #0), also called NUL.
            </summary>
            <remarks>
            
                <para>
                    An at-sign (@) is used because it the character 
                    immediately proceeding a capital A in the
                    ASCII character set.  A control-a (^A) is
                    ASCII character 1.
                </para>
            
            </remarks>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlA">
            <summary>
                Control-A (SOH).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlB">
            <summary>
                Control-B (STX).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlC">
            <summary>
                Control-C (ETX).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlD">
            <summary>
                Control-D (EOT).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlE">
            <summary>
                Control-E (ENQ).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlF">
            <summary>
                Control-F (ACK).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlG">
            <summary>
                Control-G (BEL).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlH">
            <summary>
                Control-H (BS).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlI">
            <summary>
                Control-I (TAB).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlJ">
            <summary>
                Control-J (LF).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlK">
            <summary>
                Control-K (VT).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlL">
            <summary>
                Control-L (FF).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlM">
            <summary>
                Control-M (CR).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlN">
            <summary>
                Control-N (SO).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlO">
            <summary>
                Control-O (SI).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlP">
            <summary>
                Control-P (DLE).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlQ">
            <summary>
                Control-Q (DC1).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlR">
            <summary>
                Control-R (DC2).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlS">
            <summary>
                Control-S (DC3).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlT">
            <summary>
                Control-T (DC4).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlU">
            <summary>
                Control-U (NAK).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlV">
            <summary>
                A control-v character (also called the
                SYN or Synchronous Idle character).
            </summary>
            <remarks>
                A control-v is used as the prefix character
                by the FidoNet AVATAR protocol.  AVATAR is a standard
                for embedding color and cursor commands in
                text sent to a remote terminal; it was popular
                during the late 1980s and early 1990s in the
                dial-up BBS community.
            </remarks>
            <seealso cref="T:Thought.Terminals.AvatarTerminalProtocol"/>
            <seealso cref="T:Thought.Terminals.Translators.AvatarTranslator"/>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlW">
            <summary>
                Control-W (ETB).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlX">
            <summary>
                Control-X (CAN).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlY">
            <summary>
                Control-Y (EM).
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiControlChar.ControlZ">
            <summary>
                Control-Z (SUB).
            </summary>
        </member>
        <member name="T:Thought.Terminals.Terminal">
            <summary>
                Provides a text terminal system with support for
                colors, cursor positioning, embedded control codes,
                and remote terminal protocols.
            </summary>
            <remarks>
                <para>
                    The various Read functions (such as ReadChar, ReadDigit,
                    etc) read characters without a user interface.  All are
                    blocking calls that do not return until a character
                    is available.
                </para>
                <para>
                    The Prompt functions (such as PromptEnter, PromptBoolean)
                    provide visual interfaces, such as colorful prompts or
                    hotkey listings.  The functions are sufficient for most
                    applications without requiring custom code.
                </para>
            </remarks>
        </member>
        <member name="F:Thought.Terminals.Terminal.defaultPausePrompt">
            <summary>
                Stores the default text prompt to show when pausing.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.defaultPasswordCharacter">
            <summary>
                Stores the default character to show when entering passwords.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.falseCharacter">
            <summary>
                Stores a character that indicates False.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.colorStack">
            <summary>
                Stores a stack of colors.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.newline">
            <summary>
                The newline character (or characters).
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.outputEncoding">
            <summary>
                The character encoding to use when writing text.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.textPath">
            <summary>
                Stores a list of folders containing text files.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.trueCharacter">
            <summary>
                Stores a character that indicates True.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.translators">
            <summary>
                Stores registered translators.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.#ctor">
            <summary>
                Creates a new terminal.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.Beep">
            <summary>
                Plays a beep on the terminal.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.ClearRow">
            <summary>
                Clears the current row.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.ClearRowBeginning">
            <summary>
                Clears the text between the start of the current
                row and the cursor.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.ClearRowEnding">
            <summary>
                Clears the text between the cursor and the end 
                of the line using the current color.  The character
                underneath the cursor is cleared.
            </summary>
            <remarks>
                The cleared text is treated as invisible from the
                perspective of the user; however, the remote client
                may use a spaces or some other 'invisible' character 
                to accomplishing the clearing.  Developers should not
                assume that spaces, or nulls, or any other character
                is guaranteed to fill to cleared space.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.ClearScreen">
            <summary>
                Clears the screen and moves the cursor to 
                the home position (0,0).
            </summary>
            <remarks>
                
                <para>
                    The cursor is moved to the home position (0,0)
                    upon return from this command.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.ClearScreen(Thought.Terminals.TextStyle)">
            <summary>
                Changes to the specified text style and then clears the screen.
            </summary>
            <param name="textStyle">A text color</param>
            <remarks>
            
                <para>
                    The specified color is set as the current color
                    upon return.  This means the
                    function is a convenient way of synchronzing
                    the terminal object with the actual color of the
                    remote terminal.  Note that upon starting a session,
                    the terminal does not have a reliable way of determining
                    the current color until it has been set through any
                    of the color-related methods or properties.
                </para>
            
            </remarks>
            <seealso cref="M:Thought.Terminals.Terminal.ClearScreen"/>
        </member>
        <member name="M:Thought.Terminals.Terminal.ClearScreenBeginning">
            <summary>
                Clears the text between the start of the
                screen and the cursor.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.ClearScreenEnding">
            <summary>
                Clears the text between the cursor and the end of the screen.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.Close">
            <summary>
                Closes the terminal session.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.Close(System.String)">
            <summary>
                Displays the specified text and closes
                any underlying streams and other resources.
            </summary>
            <param name="text">Text to display before closing.</param>
            <remarks>
                <para>
                    Control codes are interpreted.
                </para>
                <para>
                    The terminal does not wait for a user response 
                    before closing, although it will attempt to flush
                    the output to ensure the user has an opportunity
                    to see the text.  You may wish to use one of the
                    pause-related controls that are supported by
                    various control code translators.
                </para>
            </remarks>
        </member>
        <member name="P:Thought.Terminals.Terminal.DefaultPausePrompt">
            <summary>
                The default text to show when prompting
                the user to hit the Enter key.
            </summary>
        </member>
        <member name="P:Thought.Terminals.Terminal.DefaultPasswordCharacter">
            <summary>
                The default character to use when displaying password prompts.
            </summary>
        </member>
        <member name="P:Thought.Terminals.Terminal.FalseCharacter">
            <summary>
                The default character to indicate a false value (e.g. 'N').
            </summary>
            <remarks>
                
                <para>
                    This character is used by the prompt functions
                    when asking for true/false values.  You should change
                    the character to whatever is appropriate for your
                    application and the language of the user.  Note: the
                    prompt functions do have overloaded versions that
                    allow you to specify as a method character; the
                    default is used only if unspecified.
                </para>
            
            </remarks>
            <seealso cref="P:Thought.Terminals.Terminal.TrueCharacter"/>
        </member>
        <member name="M:Thought.Terminals.Terminal.GetStandardInput">
            <summary>
                Returns the standard input stream.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.GetStandardOutput">
            <summary>
                Returns the standard output stream.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.GetStyle">
            <summary>
                Returns the current style.
            </summary>
            <returns>
                The current <see cref="T:Thought.Terminals.TextStyle"/> object.
            </returns>
            <remarks>
                This method must be implemented by an inheriting class.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursor(System.Int32,System.Int32)">
            <summary>
                Moves the cursor to a new column and row.
            </summary>
            <param name="column">Zero-based column number</param>
            <param name="row">Zero-based row number</param>
            <remarks>
            
                <para>
                  The home position (0,0) is located at the
                  upper-left corner of the screen.  
                  Classic BBS and door kits commonly used 1-based
                  coordinates.
                </para>
            
            </remarks>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorDown"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorHome"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorLeft"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorRight"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorUp"/>
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursorDown">
            <summary>
                Moves the cursor down by one row.
            </summary>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursor(System.Int32,System.Int32)"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorDown(System.Int32)"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorHome"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorLeft"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorRight"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorUp"/>
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursorDown(System.Int32)">
            <summary>
                Moves the cursor downward by a specified number of rows.
            </summary>
            <param name="rows">Number of rows</param>
            <remarks>
            
                <para>
                    The cursor will not move beyond the bottom row
                    of the screen, nor will calling this method
                    cause the screen to scroll.
                </para>
            </remarks>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursor(System.Int32,System.Int32)"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorHome"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorDown"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorLeft"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorRight"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorUp"/>
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursorHome">
            <summary>
                Moves the cursor to the home position in the
                upper-left corner of the screen.
            </summary>
            <remarks>
                This call is effectively the same as calling
                MoveCursor with coordinates (0, 0).  However, some
                terminal protocols implement this functionality
                as an efficient control code (rather than a longer
                cursor positioning code).
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursorLeft">
            <summary>
                Moves the cursor one position to the left.
            </summary>
            <remarks>
                The cursor is not moved if it is already located
                on the leftmost side of the screen.
            </remarks>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursor(System.Int32,System.Int32)"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorDown"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorHome"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorLeft(System.Int32)"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorRight"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorUp"/>
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursorLeft(System.Int32)">
            <summary>
                Moves the cursor toward the left by the
                specified number of columns.
            </summary>
            <param name="columns">The number of columns</param>
            <remarks>
            
                <para>
                    The call is ignored if the number of columns
                    is zero (this is not treated as an out-of-range
                    exception because some calculations will result
                    in a movement of zero characters.
                </para>
            
                <para>
                    The cursor is not wrapped past the leftmost side
                    of the screen.
                </para>
            </remarks>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursor(System.Int32,System.Int32)"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorDown"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorHome"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorLeft"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorRight"/>
            <seealso cref="M:Thought.Terminals.Terminal.MoveCursorUp"/>        
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursorRight">
            <summary>
                Moves the cursor toward the right by one row.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursorRight(System.Int32)">
            <summary>
                Moves the cursor toward the right by the
                specified number of columns.
            </summary>
            <param name="columns">Number of columns</param>
            <remarks>
                <para>
                    A column count of zero is ignored, while
                    a negative count will cause an out-of-range
                    exception.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursorUp">
            <summary>
                Moves the cursor upward by one row.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.MoveCursorUp(System.Int32)">
            <summary>
                Moves the cursor upward by the specified
                number of rows.
            </summary>
            <param name="rows">Number of rows to move upward</param>
            <remarks>
                A movement of zero rows is ignored.
            </remarks>
        </member>
        <member name="P:Thought.Terminals.Terminal.NewLine">
            <summary>
                The newline character sequence.
            </summary>
        </member>
        <member name="P:Thought.Terminals.Terminal.OutputEncoding">
            <summary>
                The character encoding to use when writing text.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.PopStyle">
            <summary>
                Sets the text style to the most recent style pushed onto
                the stack, then pops that style off of the stack.
            </summary>
            <returns>
                The new text style.
            </returns>
            <remarks>
            
                <para>
                    The style stack allows you to temporarily change
                    colors without remembering the old styles.  In generally,
                    you push a new style onto the stack, write any output, then
                    pop the style off the stack (which restores the old style).
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptEnter">
            <summary>
               Waits for the user to press the enter key
               using the default wait prompt.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptEnter(System.Boolean)">
            <summary>
                Waits for the user to press the Enter key.
                The default prompt can be optionally shown.
            </summary>
            <param name="showDefaultPrompt">
                Indicates whether or not to show the
                default prompt (defined with the
                <see cref="P:Thought.Terminals.Terminal.DefaultPausePrompt"/> property).
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptEnter(System.String)">
            <summary>
                Displays a prompt (with translation) and waits
                for the user to press the Enter key.
            </summary>
            <param name="prompt">
                Text containing optional control codes.
            </param>
            <remarks>
                
                <para>
                    No prompt is displayed if the specified
                    text is null or empty.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptPattern(System.String,System.Boolean)">
            <summary>
                Prompts the user for text based on an input pattern.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.PushStyle">
            <summary>
                Pushes the current color onto the stack.
                It can be restored later with any of the
                PopColor methods.
            </summary>
            <remarks>
            
                <para>
                    The color stack provides a convenient
                    way of temporarily changing a color
                    for an output operation.  For example, a 
                    menu drawing method can save the current
                    color, display the menu items, then restore
                    the original when finished.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.PushStyle(System.Byte,Thought.Terminals.CgaHighBit)">
            <summary>
                Pushes the current foreground and background colors onto
                the stack, then sets the current color to the specified
                CGA-encoded color attribute.
            </summary>
            <param name="cgaAttribute">
                The encoded CGA attribute.
            </param>
            <param name="highBitMeaning">
                The meaning of the high bit in the CGA attribute.
            </param>
            <remarks>
                A CGA attribute contains the foreground encoded as the
                lowest four bits and the background encoded as the upper
                four bits.  
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.PushStyle(Thought.Terminals.TextStyle)">
            <summary>
                Pushes a <see cref="T:Thought.Terminals.TextStyle"/> onto the style stack.
            </summary>
            <param name="style">
                A <see cref="T:Thought.Terminals.TextStyle"/> to push onto the stack.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.ReadChar">
            <summary>
                Reads a single character from the user.
            </summary>
            <remarks>
                This is a blocking call; it will not
                return until a character is available
                in the input buffer.
            </remarks>
            <returns>Character received by the user or remote terminal.</returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.ReadChar(System.Char[])">
            <summary>
                Waits for the user to press any of
                the specified characters.
            </summary>
            <param name="validChars">
                Array of valid characters.
            </param>
            <returns>
                The selected character.
            </returns>
            <remarks>
            
                <para>
                    This is a blocking call; it will not return
                    until the user has pressed one of the characters
                    in the array.  Consider adding the escape
                    character (ASCII #27) when appropriate; this is
                    the most common key associated with cancelation.
                </para>
                <para>
                    The array is case-sensitive.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.ReadChar(System.Char[],System.Boolean)">
            <summary>
                Waits for the user to press any of the characters
                specified in an array while optionally ignoring
                capitalization.
            </summary>
            <param name="validChars">
                A character array containing the valid characters
                that can be sent by the user.  Other characters
                are ignored.
            </param>
            <param name="ignoreCase">
                True if capitalization is ignored.
            </param>
            <returns>
                The character sent by the user.  The character
                matches the capitalization sent by the user, not
                the capitalization in the validChars array.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.ReadChar(System.String)">
            <summary>
               Waits for the user to press one of the
               characters in the specified string.
            </summary>
            <param name="validChars">
                String containing valid characters.
            </param>
            <returns>
                The character pressed or sent by the remote terminal.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.ReadChar(System.String,System.Boolean)">
            <summary>
                Waits for any character in the specified string
                to be pressed, optionally ignoring capitalization.
            </summary>
            <param name="validChars">
                A string containing valid characters.  Other characters
                are ignored.
            </param>
            <param name="ignoreCase">
                Indicates whether to ignore capitalization.
            </param>
            <returns>
                The exact character sent by the user.  The character
                matches the capitalization sent by the user, not the
                capitalization of the character in the validChars
                string.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.ReadDigit">
            <summary>
                Waits for the user to press a digit (0 through 9).
                The character is not echoed to the terminal.
            </summary>
            <returns>
                The digit pressed by the user.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.ReadLetter">
            <summary>
                Waits for the user to press a character
                classified as a letter.
            </summary>
            <returns>The letter pressed by the user</returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.ResolveFileName(System.String)">
            <summary>
                Given an unparsed path, attempts to locate a
                text file by searching in all text folders.
            </summary>
            <param name="filename">File name to resolve</param>
            <returns>
                Full path to the file.
            </returns>
            <seealso cref="P:Thought.Terminals.Terminal.TextPath"/>
        </member>
        <member name="M:Thought.Terminals.Terminal.SetBackground(System.Byte,Thought.Terminals.CgaHighBit)">
            <summary>
                Changes the current background style to the 
                color encoded in a CGA attribute byte.
            </summary>
            <param name="cgaAttribute">
                An encoded CGA attribute.
            </param>
            <param name="highBitMeaning">
                The meaning of the high bit in the CGA attribute.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.SetBackground(System.ConsoleColor)">
            <summary>
                Changes the current background to the 
                specified System.ConsoleColor.
            </summary>
            <param name="color">
                A System.ConsoleColor value.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.SetForeground(System.Byte)">
            <summary>
                Changes the current foreground color to the 
                foreground encoded in a CGA attribute.
            </summary>
            <param name="cgaAttribute">
                A CGA attribute.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.SetForeground(System.ConsoleColor)">
            <summary>
                Changes the current foreground color
                to the specified System.ConsoleColor.
            </summary>
            <param name="color">
                A System.ConsoleColor value.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.SetStyle(Thought.Terminals.TextColor,Thought.Terminals.TextColor)">
            <summary>
                Changes the terminal to the specified foreground
                and background colors.
            </summary>
            <param name="foregroundColor">
                New foreground color.
            </param>
            <param name="backgroundColor">
                New background color.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.SetStyle(System.Byte,Thought.Terminals.CgaHighBit)">
            <summary>
                Changes the current color to the style encoded
                in a CGA attribute.
            </summary>
            <param name="cgaAttribute">
                A CGA attribute that encodes the foreground
                color and background color, and either the blinking
                or background intensity.
            </param>
            <param name="highBitMeaning">
                The meaning of the high bit in the CGA attribute.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.SetStyle(System.Byte,System.Byte,Thought.Terminals.CgaHighBit)">
            <summary>
                Changes the current style based on a CGA encoded color.
            </summary>
            <param name="cgaForeground">
                The CGA foreground color.
            </param>
            <param name="cgaBackground">
                The CGA background color and blinking/intensity bit.
            </param>
            <param name="highBitMeaning">
                The meaning of the high bit in the CGA background value.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.SetStyle(Thought.Terminals.TextStyle)">
            <summary>
                Changes the current style.
            </summary>
            <param name="textStyle">
                A text style that will be used when writing
                text on the screen.
            </param>
            <remarks>
                This method must be implemented by inheriting classes.
            </remarks>
        </member>
        <member name="P:Thought.Terminals.Terminal.TextPath">
            <summary>
                A list of folders that should be search for display files.
            </summary>
            <remarks>
                Each folder should be separated with the OS-specific
                path separator (e.g. a semicolon on DOS and Windows).
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.Translate(System.String)">
            <summary>
                Translates a string using the current
                translators registered with the terminal.
            </summary>
            <param name="text">
                The text to translate.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.TranslateLine(System.String)">
            <summary>
                Translates a string using the current
                translators registered with the terminal, 
                then writes a newline character.
            </summary>
            <param name="text">
                The text to translate.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.Translate(System.String,Thought.Terminals.TranslatorCollection)">
            <summary>
                Displays the specified string while executing
                embedded control codes.
            </summary>
            <param name="text">Text to display</param>
            <param name="withTranslators">
                A collection of translators that will be
                valid for this call.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.TranslateSubstring(System.String,System.Int32,Thought.Terminals.TranslatorCollection)">
            <summary>
                Translates the code at a position using any of
                the listed translators.  This is used internally by
                the master Translate() function.
            </summary>
            <remarks>
            
                <para>
                    Before calling this function, any pending characters
                    must be flushed because a translator is likely
                    to call the terminal display functions.  If pending
                    characters are not written, then display calls will be
                    executed out of order.
                </para>
            
                <para>
                    Like a regular translator, the function returns the
                    same index if the code was unrecognized, or a new index
                    at which to continue processing.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.TranslateFile(System.String)">
            <summary>
                Displays a file while translating embedded control codes.
            </summary>
            <param name="path">Path to a text file</param>
        </member>
        <member name="M:Thought.Terminals.Terminal.TranslateFile(System.String,System.Boolean)">
            <summary>
                Translates a file using code page 437 encoding.
            </summary>
            <param name="path">
                The path to the file.
            </param>
            <param name="pause">
                Determines whether to pause after the file is displayed.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.TranslateFile(System.String,System.Text.Encoding)">
            <summary>
                Displays a file with the specified encoding.
            </summary>
            <param name="path">
                The path to the file.
            </param>
            <param name="encoding">
                The encoding of the file.  DOS(tm) files typically found
                on BBS systems use code page 437.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.TranslateFile(System.String,System.Boolean,System.Text.Encoding)">
            <summary>
                Writes a file to the terminal while translating any
                embedded control codes.
            </summary>
            <param name="path">
                The path to a text file.
            </param>
            <param name="pause">
                Enables or disables a pause prompt after the file is displayed.
            </param>
            <param name="encoding">
                The encoding of the text file.
            </param>
        </member>
        <member name="P:Thought.Terminals.Terminal.Translators">
            <summary>
                Collection of translators.
            </summary>
            <seealso cref="T:Thought.Terminals.Translator"/>
        </member>
        <member name="P:Thought.Terminals.Terminal.TrueCharacter">
            <summary>
                Specifies the default character that indicates
                a True value (such as 'T').
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.Write(System.Char)">
            <summary>
                Writes a character to the terminal.
            </summary>
            <param name="value">
                The character to write.
            </param>
            <remarks>
                <para>
                    This function must be implemented by the inheriting
                    class.  All other functions have default implementations
                    that call this function.  The other write functions can
                    also be overridden for performance reasons.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.Write(System.Char,System.Int32)">
            <summary>
                Writes a character multiple times.
            </summary>
            <param name="value">The character to write.</param>
            <param name="count">The number of times to write the character</param>
        </member>
        <member name="M:Thought.Terminals.Terminal.Write(System.Int32)">
            <summary>
                Converts an integer to a string and writes it to
                the terminal.
            </summary>
            <param name="value">The integer to write</param>
        </member>
        <member name="M:Thought.Terminals.Terminal.Write(System.String)">
            <summary>
                Writes a string to the terminal.
            </summary>
            <param name="value">
                The string to write.
            </param>
            <remarks>
                The default implementation calls the Write(char)
                function in a loop.  It is recommended that
                implementors overwrite this function and implement
                a more optimal method of writing a full string.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.WriteException(System.Exception)">
            <summary>
                Writes an exception to the terminal.
            </summary>
            <param name="exception">
                The exception to write.
            </param>
            <remarks>
                This method is intended for debugging purposes.  The function
                should not be called on production systems where revealing
                exceptions may allow hackers to gain valuable information 
                about the system.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.WriteLine">
            <summary>
                Writes a blank line using the newline character.
                This is a carriage return on UNIX and a return + 
                linefeed on Windows and DOS.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.WriteLine(System.Char)">
            <summary>
                Writes a string to the terminal along with the
                current newline character.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.WriteLine(System.String)">
            <summary>
                Writes a string to the terminal along with the
                current newline character.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Terminal.BooleanPromptSettings">
            <summary>
                The settings for a boolean prompt.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.BooleanPromptSettings.FalseCharacter">
            <summary>
                The character that means false.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.BooleanPromptSettings.FalseStyle">
            <summary>
                The style of the false character.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.BooleanPromptSettings.FalseWord">
            <summary>
                The word that means false.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.BooleanPromptSettings.TrueCharacter">
            <summary>
                The character that means True.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.BooleanPromptSettings.TrueStyle">
            <summary>
                The style of the true character.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.BooleanPromptSettings.TrueWord">
            <summary>
                The word that means True.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptBoolean(System.String,System.Boolean,Thought.Terminals.Terminal.BooleanPromptSettings)">
            <summary>
                Prompts the user for a true/false value.
            </summary>
            <param name="text">
                The optional text prompt to show to the user.
            </param>
            <param name="defaultValue">
                The default boolean result if the user presses ENTER
                instead of pressing one of the boolean characters.
            </param>
            <param name="settings">
                A <see cref="T:Thought.Terminals.Terminal.BooleanPromptSettings"/> object that
                contains advanced options.
            </param>
            <returns>
                A boolean value indicating the selection of the user.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptBoolean(System.String,System.Boolean)">
             <summary>
                 Prompts the user to enter a yes/no or
                 true/false value.
             </summary>
             <param name="text">
                 Optional text (such as "Do you wish to continue?").
             </param>
             <param name="defaultValue">
                 The default value is the enter key is pressed.
             </param>
             <returns>
                 True or false, depending on the answer selected
                 by the user.
             </returns>
             <remarks>
            
                 <para>
                     All of the terminal prompt functions provide
                     basic input methods that are common to many
                     applications.  You can use them to quickly
                     obtain functionality that would otherwise
                     have to write (such as asking for a yes/no
                     answer).
                 </para>
             
             </remarks>
             <seealso cref="P:Thought.Terminals.Terminal.FalseCharacter"/>
             <seealso cref="P:Thought.Terminals.Terminal.TrueCharacter"/>
        </member>
        <member name="T:Thought.Terminals.Terminal.HotStringPromptSettings">
            <summary>
                The settings for a hotstring prompt.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptHotString(System.String)">
            <summary>
                Displays a prompt and waits for the user
                to press one of the hotkeys defined within
                the prompt.
            </summary>
            <param name="prompt">
                The prompt containing embedded hotkeys using
                ampersand notation.
            </param>
            <returns>
                The character pressed by the user.
            </returns>
            <remarks>
                
                <para>
                    Hotkeys are specified using the same notation
                    as Windows menu hotkeys -- an ampersand followed
                    by the desired character.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptHotString(System.String,Thought.Terminals.Terminal.HotStringPromptSettings)">
             <summary>
                 Displays a prompt to the user, then waits for
                 any defined hotkeys to be pressed.
             </summary>
             <remarks>
             
                 <para>
                     This version of the method implements all of the
                     functionality of the prompt.  Other overloaded versions
                     are easier to use because they set default values
                     when calling this version.
                 </para>
            
                 <para>
                     You may use a double-ampersand to force a single
                     ampersand in the output prompt.  Due to technical
                     limitations, ampersands are not allowed as hotchars.
                     This is because there is no reliable way of determing
                     the hotchars in some cases.
                 </para>
             
                 <para>
                     For exmple, &amp;&amp;&amp;X could be as a prompt
                     containing an ampersand and an X as valid hotchars, or
                     a prompt containing a written ampersand and an X as
                     a hotchar.  If you really need an ampersand as a menu
                     option, you'll need to implement your prompt code
                     manually.
                 </para>
             
                 <para>
                     Control codes between ampersands are translated; that
                     is, a prompt like "@CLS@Hello, &amp;World" will clear
                     the screen if the @CLS@ code is implemented by a 
                     translator.  However, control codes crossing over a hotkey
                     will not be translated.  A prompt like @CL&amp;S@ will 
                     not cause the screen to clear.  This behavior may change
                     in a future version of the software.
                 </para>
             
                 <para>
                     Additionally, translators using an ampersand as a prefix
                     character may cause undefined behavior with this function.
                     If you have such a translator, disable it before calling
                     this or any other PromptHotString method.
                 </para>
             
             </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptInteger">
            <summary>
                Prompts to enter an integer of any range.
            </summary>
            <returns>
                The integer entered by the user, or null if the user
                pressed the escape key.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptInteger(System.Nullable{System.Int32})">
            <summary>
                Prompts the user to enter an integer.
            </summary>
            <param name="initialValue">
                The initial value shown to the user.
            </param>
            <returns>
                The value selected by the user, or null if the user
                pressed the escape key.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptInteger(System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
                Prompts the user to enter an integer.
            </summary>
            <param name="initialValue">
                The initial value shown to the user.
            </param>
            <param name="allowBlank">
                True if a blank entry is accepted.
            </param>
            <param name="allowEscape">
                True if the user can press escape to exit the prompt.
            </param>
            <returns>
                The integer selected by the user, or null if the user
                pressed the escape key (and escaping is allowed).
            </returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptInteger(System.Boolean,System.Boolean)">
            <summary>
                Prompts the user to enter an integer.
            </summary>
            <param name="allowBlank">
                True if a blank entry is allowed.
            </param>
            <param name="allowEscape">
                True if the user is allowed to exit the prompt by pressing the escape key.
            </param>
            <returns>
                The integer entered by the user, or null if the user hit the
                escape key (and escaping is allowed).
            </returns>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptInteger(System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
               Prompts the user to enter an integer within a specified range.
            </summary>
            <remarks>
                <para>
                    This is the master PromptInteger function.  All other variations
                    call this version with appropriate parameters.
                </para>
            </remarks>
        </member>
        <member name="T:Thought.Terminals.Terminal.MenuPromptSettings">
            <summary>
                The settings for a menu prompt.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.BracketStyle">
            <summary>
                The style of the prompt brackets.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.DefaultHotKeyStyle">
            <summary>
                The style of the default hotkey.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.HotKeyStyle">
            <summary>
                The style of a hotkey.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.LeftBracket">
            <summary>
                The left bracket character.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.RightBracket">
            <summary>
                The right bracket character.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.PromptTextStyle">
            <summary>
                The style of the prompt text.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.Separator">
            <summary>
                The separator character.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.SeparatorStyle">
            <summary>
                The style of the separator character.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.WriteMenu">
            <summary>
                Whether or not to write the menu.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.WriteNewLine">
            <summary>
                Whether or not to write a new line character when finished.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.WriteWord">
            <summary>
                Whether or not to write the word that corresponds to the entry.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.MenuPromptSettings.WordStyle">
            <summary>
                The style of the word that corresponds to a menu item.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.PromptPassword(System.Int32,System.Int32)">
            <summary>
                Prompts the user for a password with the minimum
                and maximum length.
            </summary>
            <param name="minimumLength">
                The minimum length of the password.
            </param>
            <param name="maximumLength">
                The maximum length of the password.
            </param>
            <returns>
                The password entered by the user.
            </returns>
        </member>
        <member name="T:Thought.Terminals.Terminal.TextPromptSettings">
            <summary>
                Settings for a text prompt.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.BackgroundCharacter">
            <summary>
                The character that fills the background of the prompt.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.BackgroundStyle">
            <summary>
                The style to fill out the background of the prompt.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.BorderStyle">
            <summary>
                The style of any border characters.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.EntryCharacter">
            <summary>
                The character to display instead of the entered character (e.g. for passwords).
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.EntryStyle">
            <summary>
                The style of characters entered into the prompt.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.FillOut">
            <summary>
                Whether or not the prompt should fill out its size.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.LeftBorder">
            <summary>
                The text to write to the left of the entry prompt.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.Length">
            <summary>
                The length of the prompt.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.MaximumEntryLength">
            <summary>
                The maximum length of the entered text.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.MinimumEntryLength">
            <summary>
                The minimum length of the entered text.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.PromptStyle">
            <summary>
                The style of the prompt text.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.RightBorder">
            <summary>
                The text to write to the right of the entry prompt.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Terminal.TextPromptSettings.WriteNewLine">
            <summary>
                Whether or not the prompt should write a newline when finished.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Terminal.WritePadded(System.String,System.Int32)">
            <summary>
                Pads or truncates a string and then writes it to the terminal.
            </summary>
            <param name="value">
                The unformatted string to write.
            </param>
            <param name="length">
                The desired length of the output.
            </param>
            <remarks>
                The output is left-justified and padded with a space character
                if the desired length is longer than the text.  The style of
                the output is not changed.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.WritePadded(System.String,System.Int32,System.Char)">
            <summary>
                Pads or truncates a string and then writes it to the terminal.
            </summary>
            <param name="value">
                The unformatted string to write.
            </param>
            <param name="length">
                The desired length of the output.
            </param>
            <param name="paddingChar">
                The character to use as padding when the desired length is
                longer than the supplied text.
            </param>
            <remarks>
                The output string is left-justified without any style (e.g. color) changes.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Terminal.WritePadded(System.String,System.Int32,Thought.Terminals.JustifyText)">
            <summary>
                Pads or truncates a string and then writes it to the terminal.
            </summary>
            <param name="value">
                The unformatted string to write.
            </param>
            <param name="length">
                The desired length of the string.
            </param>
            <param name="justifyText">
                The justification of the text after padding.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.WritePadded(System.String,System.Int32,Thought.Terminals.JustifyText,System.Char)">
            <summary>
                Pads or truncates a string and then writes it to the terminal.
            </summary>
            <param name="value">
                The unformatted string to write.
            </param>
            <param name="length">
                The desired length of the string.
            </param>
            <param name="justifyText">
                The justification of the text after padding.
            </param>
            <param name="paddingChar">
                The character to use for padding.
            </param>
        </member>
        <member name="M:Thought.Terminals.Terminal.WritePadded(System.String,System.Int32,Thought.Terminals.JustifyText,System.Char,Thought.Terminals.TextStyle)">
            <summary>
                Writes a string padded or truncated to the
                specified length.
            </summary>
            <param name="value">
                The unformatted string to write.
            </param>
            <param name="length">
                The desired length of the string.
            </param>
            <param name="justifyText">
                The justification of the text after padding.
            </param>
            <param name="paddingChar">
                The character to use for padding.
            </param>
            <param name="paddingStyle">
                The style to use when writing padding characters.
            </param>
        </member>
        <member name="T:Thought.Terminals.AsciiByte">
            <summary>
                Enumerates ASCII control characters as bytes.
            </summary>
            <remarks>
                This enumeration is similar to the <see cref="T:Thought.Terminals.AsciiChar"/>
                static class.  This class defines each ASCII control character
                as a byte; the AsciiChar class defines each ASCII control
                character as a character constant.
            </remarks>
            <seealso cref="T:Thought.Terminals.AsciiChar"/>
            <seealso cref="T:Thought.Terminals.AsciiControlChar"/>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.NUL">
            <summary>
                Null character (^@)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.SOH">
            <summary>
                Start of Heading (^A)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.STX">
            <summary>
                Start of Text (^B)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.ETX">
            <summary>
                End of Text (^C)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.EOT">
            <summary>
                End of Transmission (^D)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.ENQ">
            <summary>
                Enquiry (^E)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.ACK">
            <summary>
                Acknowledgement (^F)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.BEL">
            <summary>
                Bell (^G)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.BS">
            <summary>
                Backspace (^H)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.TAB">
            <summary>
                Horizontal Tab (^I)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.LF">
            <summary>
                Line Feed (^J)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.VT">
            <summary>
                Vertical Tab (^K)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.FF">
            <summary>
                Form Feed (^L)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.CR">
            <summary>
                Carriage Return (^M)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.SO">
            <summary>
                Shift Out (^N)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.SI">
            <summary>
                Shift In (^O)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.DLE">
            <summary>
                Data Link Escape (^P)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.DC1">
            <summary>
                Device Control 1 (^Q)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.DC2">
            <summary>
                Device Control 2 (^R)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.DC3">
            <summary>
                Device Control 3 (^S)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.DC4">
            <summary>
                Device Control 4 (^T)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.NAK">
            <summary>
                Negative Acknowledge (^U)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.SYN">
            <summary>
                Synchronous Idle (^V)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.ETB">
            <summary>
                End of Transmission Block (^W)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.CAN">
            <summary>
                Cancel (^X)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.EM">
            <summary>
                End of Medium (^Y)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.SUB">
            <summary>
                Substitute (^Z)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.ESC">
            <summary>
                Escape (^[)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.FS">
            <summary>
                File Separator (^\)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.GS">
            <summary>
                Group Separator (^])
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.RS">
            <summary>
                Record Separator (^^)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.US">
            <summary>
                Unit Separator (^_)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiByte.DEL">
            <summary>
                Delete (^?)
            </summary>
        </member>
        <member name="T:Thought.Terminals.AsciiChar">
            <summary>
                Character constants for named ASCII characters.
            </summary>
            <seealso cref="T:Thought.Terminals.AsciiByte"/>
            <seealso cref="T:Thought.Terminals.AsciiControlChar"/>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.NUL">
            <summary>
                Null character (^@)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.SOH">
            <summary>
                Start of Heading (^A)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.STX">
            <summary>
                Start of Text (^B)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.ETX">
            <summary>
                End of Text (^C)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.EOT">
            <summary>
                End of Transmission (^D)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.ENQ">
            <summary>
                Enquiry (^E)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.ACK">
            <summary>
                Acknowledgement (^F)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.BEL">
            <summary>
                Bell (^G)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.BS">
            <summary>
                Backspace (^H)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.TAB">
            <summary>
                Horizontal Tab (^I)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.LF">
            <summary>
                Linefeed (^J)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.VT">
            <summary>
                Vertical Tab (^K)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.FF">
            <summary>
                Form Feed (^L)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.CR">
            <summary>
                Carriage Return (^M)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.SO">
            <summary>
                Shift Out (^N)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.SI">
            <summary>
                Shift In (^O)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.DLE">
            <summary>
                Data Link Escape (^P)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.DC1">
            <summary>
                Device Control 1 (^Q)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.DC2">
            <summary>
                Device Control 2 (^R)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.DC3">
            <summary>
                Device Control 3 (^S)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.DC4">
            <summary>
                Device Control 4 (^T)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.NAK">
            <summary>
                Negative Acknowledge (^U)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.SYN">
            <summary>
                Synchronous Idle (^V)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.ETB">
            <summary>
                End of Transmission Block (^W)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.CAN">
            <summary>
                Cancel (^X)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.EM">
            <summary>
                End of Medium (^Y)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.SUB">
            <summary>
                Substitute (^Z)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.ESC">
            <summary>
                Escape (^[)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.FS">
            <summary>
                File Separator (^\)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.GS">
            <summary>
                Group Separator (^])
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.RS">
            <summary>
                Record Separator (^^)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.US">
            <summary>
                Unit Separator (^_)
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.Space">
            <summary>
                Space character
            </summary>
        </member>
        <member name="F:Thought.Terminals.AsciiChar.DEL">
            <summary>
                Delete (^?)
            </summary>
        </member>
        <member name="T:Thought.Terminals.AnsiTerminalProtocol">
            <summary>
                Translates common terminal operations into control
                codes that can be executed by an ANSI-BBS terminal.
            </summary>
            
            <remarks>
            
                <para>
                    ANSI-BBS is not an official standard; it is a subset
                    of the X3.64 protocol.  The subset contains
                    the most popular control codes required by dial-up
                    bulletin boards, such as colors and cursor movements.
                    Several extensions for sound effects are also treated
                    as part of ANSI-BBS, although these extensions are not
                    supported here.
                </para>
            
                <para>
                    ANSI-BBS largely correspond to the subset of codes
                    implemented by the ANSI.SYS driver for MS-DOS(tm).
                    ANSI.SYS allowed users to execute color and control
                    codes at the command prompt, while also allowing some
                    manipulation of the keyboard.  Early BBS and terminal
                    programs required ANSI.SYS for its displays.
                    Since the codes were so closely associated with ANSI.SYS,
                    people began incorrectly calling the subset "ANSI".
                    ANSI is the name of an organization, not a standard.
                    The terminology "ANSI-BBS" was later introduced to provide
                    some clarity.
                </para>
            
            </remarks>
            <seealso cref="T:Thought.Terminals.AvatarTerminalProtocol"/>
            <seealso cref="T:Thought.Terminals.ITerminalProtocol"/>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.#ctor">
            <summary>
                Creates a new instance of the ANSI-BBS encoder.
            </summary>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.#ctor(System.String)">
            <summary>
                Creates an ANSI-BBS encoder using the specified string
                as the Control Sequence Introducer (CSI).  For ANSI-BBS
                the CSI is an escape character followed by the bracket "[".
            </summary>
            <param name="controlSequenceIntroducer">
                The string of characters to use as a CSI.
            </param>
            <seealso cref="P:Thought.Terminals.AnsiTerminalProtocol.ControlSequenceIntroducer"/>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.ClearRow">
            <summary>
                Builds an ANSI escape code that clears the text
                on the current row without scrolling lower text
                upward and without moving the cursor position.
            </summary>
            <returns>
                The code CSI 2 K.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.ClearRowBeginning">
            <summary>
                Builds an ANSI-BBS escape code that clears the text
                between the beginning of the current row and the cursor.
            </summary>
            <returns>
                The code CSI 1 K.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.ClearRowEnding">
            <summary>
                Builds an ANSI-BBS escape code to clear the current
                line from the cursor to the end of the row.
            </summary>
            <returns>
                An ANSI-BBS escape code.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.ClearScreen">
            <summary>
                Builds an ANSI-BBS escape code to clear the screen.
            </summary>
            <returns>
                An ANSI-BBS escape code that clears the screen.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.ClearScreenBeginning">
            <summary>
                Builds an ANSI-BBS escape code that clears the text
                between the start of the screen and the cursor.
            </summary>
            <returns>
                The code CSI 1 J.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.ClearScreenEnding">
            <summary>
                Builds a code that clears the text between the
                cursor and the end of the screen.
            </summary>
            <remarks>
                The X3.64 sequence is CSI 0 J, where CSI is the
                Control Sequence Introducer.  The zero (0) parameter
                is optional; therefore for maximum efficiency the
                function returns only CSI J.
            </remarks>
            <returns>
                A CSI sequence followed by a capital J.
            </returns>
        </member>
        <member name="P:Thought.Terminals.AnsiTerminalProtocol.ControlSequenceIntroducer">
            <summary>
                The character or characters that mark the beginning
                of a control code.  The most common CSI for DOS and
                BBS systems is an escape character (ASCII 27) followed
                by a left square bracket ("[").
            </summary>
            <remarks>
                For safety purposes the control sequence introducer
                cannot be modified after the object is created.  The
                CSI can be specified to the constructor.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.MoveCursor(System.Int32,System.Int32)">
            <summary>
                Builds an ANSI-BBS escape code that moves the cursor.
            </summary>
            <param name="column">
                The zero-based column number.
            </param>
            <param name="row">
                The zero-based row number.
            </param>
            <returns>
                An X3.64 escape code that moves the cursor to the
                specified column and row.  Note that X3.64 coordinates
                are one-based, not zero-based.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.MoveCursorDown(System.Int32)">
            <summary>
                Builds an ANSI-BBS escape code to move the cursor
                downward by the specified number of rows.
            </summary>
            <param name="rows">
                The number of rows to move downward.
            </param>
            <returns>
                An ANSI-BBS escape code to move the cursor downward
                by the specified number of rows.  This is the
                sequence CSI n B.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.MoveCursorHome">
            <summary>
                Build an ANSI-BBS escape code that moves the cursor to
                the home position.
            </summary>
            <returns>
                An ANSI-BBS escape code that moves the cursor to the
                home position in the upper-left corner of the screen.
                This is the sequence CSI H.
            </returns>
            <remarks>
                The home position is the upper-left corner of the screen.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.MoveCursorLeft(System.Int32)">
            <summary>
                Builds an ANSI-BBS escape code that moves a cursor to
                the left by the specified number of columns.
            </summary>
            <param name="columns">
                The number of columns to move left.
            </param>
            <returns>
                An ANSI-BBS escape code that moves the cursor toward the left
                by the specified number of columns.  An empty string is returned
                if the column number is zero.  The escapde code CSI n D.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.MoveCursorRight(System.Int32)">
            <summary>
                Builds an ANSI-BBS escape code that moves the cursor
                toward the right by the specified number of columns.
            </summary>
            <param name="columns">
                The number of columns to move toward the right.
            </param>
            <returns>
                An ANSI-BBS escape code that moves the cursor toward the right
                by the specified number of columns.  An empty string is returned
                if the column count is zero.  The escape code is CSI n C.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.MoveCursorUp(System.Int32)">
            <summary>
                Builds an ANSI-BBS escape code that moves the 
                upward by the specified number of rows.
            </summary>
            <param name="rows">
                The number of rows to move upward.
            </param>
            <returns>
                An ANSI-BBS escape code that moves the cursor upward by the
                specified number of rows.  An empty string is returned if
                the row count is zero.  The escape code is CSI n A.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AnsiTerminalProtocol.SetStyle(Thought.Terminals.TextStyle,Thought.Terminals.TextStyle)">
            <summary>
                Builds an ANSI-BBS escape code to change the current color.
            </summary>
            <param name="oldStyle">
                The old or current color.
            </param>
            <param name="newStyle">
                The new color.
            </param>
            <returns>
                An ANSI-BBS escape code that changes the color from the
                old color to the new color.
            </returns>
        </member>
        <member name="T:Thought.Terminals.AvatarTerminalProtocol">
            <summary>
                Encodes common terminal operations into text codes
                that can be interpreted by an AVATAR terminal.
            </summary>
            <remarks>
            
                <para>
                    AVATAR is an old standard that was popular in
                    late 1990s as a more efficient protocol than ANSI-BBS.
                    However, it never reached popularity outside of the
                    BBS community.
                </para>
            
            </remarks>
            <seealso cref="T:Thought.Terminals.AnsiTerminalProtocol"/>
            <seealso cref="T:Thought.Terminals.ITerminalProtocol"/>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.#ctor">
            <summary>
                Creates a new instance of the AVATAR encoder.
            </summary>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.ClearRow">
            <summary>
                Not supported.
            </summary>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.ClearRowBeginning">
            <summary>
                Not supported.
            </summary>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.ClearRowEnding">
            <summary>
                Builds an AVATAR string that clears the current line from
                the cursor to the end of the row.
            </summary>
            <returns>
                An AVATAR protocol string that clears the current line from
                the cursor to the end of the row.  The AVATAR terminal will
                clear the cell underneath the cursor in addition to subsequent
                cells.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.ClearScreen">
            <summary>
                Builds an AVATAR string to clear the screen.
            </summary>
            <returns>
                An AVATAR protocol string that will clear the screen that
                position the cursor to the home position in the upper-left
                corner of the screen.
            </returns>
            <remarks>
            
                <para>
                    AVATAR uses the control-L character (ASCII) twelve
                    to clear the screen.  This is one of the few AVATAR
                    codes that do not begin with a control-V prefix.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.ClearScreenBeginning">
            <summary>
                Not supported.
            </summary>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.ClearScreenEnding">
            <summary>
                Not supported.
            </summary>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.MoveCursor(System.Int32,System.Int32)">
            <summary>
                Builds an AVATAR string to move a cursor to a position.
            </summary>
            
            <param name="column">
                The zero-based destination column.
            </param>
            
            <param name="row">
                The zero-based destination row.
            </param>
            
            <remarks>
            
                <para>
                    The AVATAR cursor code is a control-V, control-G,
                    followed by the 1-based row and column, each specified
                    as a single byte.  The full control code is always
                    exactly four bytes in length.
                </para>
            
                <para>
                    Note that AVATAR uses 1-based coordinates, whereas .NET
                    and terminal engine use 0-based coordinates almost exclusively.
                    In AVATAR, the upper-left corner of the screen has the
                    coordinates (1,1), not (0,0).
                </para>
            
            </remarks>
            
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.MoveCursorDown(System.Int32)">
            <summary>
                Builds an AVATAR string that will move the cursor
                downward by a specified number of rows.
            </summary>
            
            <param name="rows">
                The number of rows to move downward.
            </param>
            
            <remarks>
            
                <para>
                    The AVATAR code for moving the cursor downward
                    is a control-V followed by a control-D.  This sequence
                    is repeated for each desired row because AVATAR does
                    not support a parameterized way of moving the cursor
                    downward.  Therefore, the length of returned code will
                    be 2 * rows.
                </para>
            
            </remarks>
            <seealso cref="M:Thought.Terminals.AvatarTerminalProtocol.MoveCursor(System.Int32,System.Int32)"/>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.MoveCursorHome">
            <summary>
                Builds an AVATAR string that will move the cursor
                to the home position (the upper-left corner).
            </summary>
            <remarks>
            
                <para>
                    AVATAR, unlike ANSI, does not support a control
                    code to directly move the cursor to the home position.
                    Instead this encoder calls the EncodeMoveCursor
                    function with the home coordinates (0,0).
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.MoveCursorLeft(System.Int32)">
            <summary>
                Returns an AVATAR string that moves the cursor a specified
                number of columns to the left.
            </summary>
            <param name="columns">
                The number of columns to move toward the left.
            </param>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.MoveCursorRight(System.Int32)">
            <summary>
                Builds an AVATAR string that moves the cursor to the
                right by the specified number of columns.
            </summary>
            <param name="columns">
                The number of columns to move toward the right.
            </param>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.MoveCursorUp(System.Int32)">
            <summary>
                Builds an AVATAR string that will move the
                cursor upward by the specified number of rows.
            </summary>
            <param name="rows">
                The number of rows to move upward.
            </param>
            <returns>
                A ^V followed by a ^C, repeated for each desired row.
            </returns>
        </member>
        <member name="M:Thought.Terminals.AvatarTerminalProtocol.SetStyle(Thought.Terminals.TextStyle,Thought.Terminals.TextStyle)">
            <summary>
                Builds an AVATAR string that changes the current style.
            </summary>
            <param name="oldStyle">
                The original or current style.
            </param>
            <param name="newStyle">
                The new text style.
            </param>
            <remarks>
            
                <para>
                    An AVATAR color code is a control-V, followed by
                    a control-A, followed by the one-byte binary value
                    of the color.  The high bit of the byte is stripped
                    to avoid problems on communications channels that
                    do not support 8-bit bytes.
                </para>
            
                <para>
                    The oldStyle attribute is ignored.  Some text
                    protocols (such as ANSI-BBS) can generate more
                    efficient control sequences when the current style
                    is known.  An AVATAR color is always the same size,
                    regardless of the current color.
                </para>
            
            </remarks>
            
        </member>
        <member name="T:Thought.Terminals.ITerminalProtocol">
            <summary>
                <para>
                    Builds protocol strings for performing common terminal 
                    operations, such as clearing the screen.
                </para>
            </summary>
            <seealso cref="T:Thought.Terminals.AnsiTerminalProtocol"/>
            <seealso cref="T:Thought.Terminals.AvatarTerminalProtocol"/>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.ClearRow">
            <summary>
                Builds a protocol string that will clear the current row
                without moving the cursor.
            </summary>
            <returns>
                A protocol string that will cause the terminal to clear
                the current row without moving the cursor.
            </returns>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.ClearRowBeginning">
            <summary>
                Builds a protocol string that clears the current row from
                the beginning of the line to the cursor.
            </summary>
            <returns>
                A protocol string that will cause the terminal to
                clear all text between the start of the current row and the
                cursor.
            </returns>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearRow"/>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearRowEnding"/>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.ClearRowEnding">
            <summary>
                Builds a protocol string that clears all text between the
                cursor and the end of the line using the current color.
            </summary>
            <remarks>
                The character beneath the cursor is cleared; the cursor 
                position itself is not moved.
            </remarks>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearRow"/>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearRowBeginning"/>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.ClearScreen">
            <summary>
                Builds a protocol string that clears the current screen.
            </summary>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearRowBeginning"/>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearRowEnding"/>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.ClearScreenBeginning">
            <summary>
                Builds a protocol string that clears the text between
                the start of the screen and the cursor.
            </summary>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearScreen"/>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearScreenEnding"/>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.ClearScreenEnding">
            <summary>
                Builds a protocol string that clears the text between
                the cursor and the end of the screen.
            </summary>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearScreen"/>
            <seealso cref="M:Thought.Terminals.ITerminalProtocol.ClearScreenBeginning"/>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.MoveCursor(System.Int32,System.Int32)">
            <summary>
                Builds a protocol string that will move the cursor to the
                specified 0-based column and row coordinates.  The upper-left
                corner of the screen has the coordinates (0,0).
            </summary>
            <param name="column">
                The zero-based destination column.
            </param>
            <param name="row">
                The zero-based destination row.
            </param>
            <returns></returns>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.MoveCursorDown(System.Int32)">
            <summary>
                Builds a protocol string that moves the cursor downward
                by the specified number of rows.
            </summary>
            <param name="rows">
                The number of rows to move downward.
            </param>
            <remarks>
                Implementors should not raise an exception if the row count
                is zero; instead return an empty string.  An OutOfRangeException
                should be raised if the row count is negative.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.MoveCursorHome">
            <summary>
                Builds a protocol string that moves the cursor to the home
                position in the upper-left corner of the screen.
            </summary>
            <remarks>
                If a control code format does not support a native "home"
                code, the encoder returns the results of EncodeMoveCursor(0, 0).
                The home position has the coordinates (0,0).
            </remarks>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.MoveCursorLeft(System.Int32)">
            <summary>
                Builds a protocol string that moves the cursor toward the
                left by the specified number of columns.
            </summary>
            <param name="columns">
                The number of columns to move leftward.
            </param>
            <remarks>
                Implementors should not raise an exception if the column count
                is zero; instead return an empty string.  An OutOfRangeException
                should be raised if the column count is negative.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.MoveCursorRight(System.Int32)">
            <summary>
                Builds a protocol string that moves the cursor toward the
                right by the specified number of columns.
            </summary>
            <param name="columns">
                The number of columns to move toward the right.
            </param>
            <remarks>
                Implementors should not raise an exception if the column count
                is zero; instead return an empty string.  An OutOfRangeException
                should be raised if the column count is negative.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.MoveCursorUp(System.Int32)">
            <summary>
                Builds a protocol string that moves the upward
                by the specified number of rows.
            </summary>
            <param name="rows">
                The number of rows to move upward.
            </param>
            <remarks>
                Implementors should not raise an exception if the row count
                is zero; instead return an empty string.  An OutOfRangeException
                should be raised if the row count is negative.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.ITerminalProtocol.SetStyle(Thought.Terminals.TextStyle,Thought.Terminals.TextStyle)">
            <summary>
                Builds a protocol string that changes the current color.
            </summary>
            <remarks>
                Both the old (current) and new color is provided because
                some encoders may be able to generate more optimal codes if
                the old color information is known.
            </remarks>
        </member>
        <member name="T:Thought.Terminals.Translator">
            <summary>
                Base class for all control code translators.
            </summary>
            
            <remarks>
            
                <para>
                    A control code is an embedded character sequence that instructs
                    the terminal engine to perform certain actions.  For example, the
                    WildCat! @CLS@ code causes the screen to be cleared.
                </para>
            
                <para>
                    A translator is a class that implements support for
                    a particular control code format.  The terminal engine provides
                    a flexible framework that allows you to create your own formats
                    or implement support for an existing format.  For example,
                    the <see cref="T:Thought.Terminals.Translators.AnsiTranslator"/>
                    class provides support for ANSI-BBS escape sequences.
                    The <see cref="T:Thought.Terminals.Translators.AvatarTranslator"/>
                    class provides support for basic AVATAR codes.
                </para>
            
                <para>
                    All translators derive from this base class.  A derived class
                    must override the <see cref="M:Thought.Terminals.Translator.GetPrefixChars"/> and
                    <see cref="M:Thought.Terminals.Translator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)"/> methods.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translator.op_Addition(Thought.Terminals.Translator,Thought.Terminals.Translator)">
            <summary>
                Combines two translators into a translator collection.
            </summary>
            <param name="t1">The 1st translator.</param>
            <param name="t2">The 2nd translator</param>
            <returns>
                A <see cref="T:Thought.Terminals.TranslatorCollection"/> containing both translators.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translator.GetPrefixChars">
            <summary>
                Builds an array of characters that mark the beginning of any
                potential control code supported by the translator.
            </summary>
            <remarks>
            
                <para>
                    The inherited class must override this method and return
                    a character array containing every possible character
                    that marks the beginning of a potential control code.
                    For example, all ANSI-BBS control codes are prefixed with
                    an escape character (ASCII #27).  The <see cref="T:Thought.Terminals.Translators.AnsiTranslator"/>
                    class returns an array containing a single escape character.
                </para>
            
                <para>
                    The terminal engine will use this information to identify the
                    translator when processing an output character.  Multiple
                    translators can be mapped to the same character; in this case,
                    the first (earliest) registered translator is given the first 
                    chance to process the output string.
                </para>
            
            </remarks>
            <seealso cref="M:Thought.Terminals.Translator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)"/>
        </member>
        <member name="M:Thought.Terminals.Translator.HasRoom(System.String,System.Int32,System.Int32)">
            <summary>
                Determines whether or not there is sufficient room
                for a control code in a string.
            </summary>
            <param name="text">
                A string containing a control code.
            </param>
            <param name="index">
                The index of the potential code.
            </param>
            <param name="minimumLength">
                The minimum length of the string.
            </param>
            <returns>
                True if a control code of the specified length has room to
                fit within the string at the specified index.  False if
                the string is null, or the index is out of range, or
                a control code of the designated length could not fit
                in the string.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translator.IsHexDigit(System.Char)">
            <summary>
                Indicates whether the specified character is
                a hexidecimal digit.
            </summary>
            
            <param name="value">
                A unicode character
            </param>
            
            <remarks>
            
                <para>
                    This utility function is provided by the
                    base translator class because many control
                    code formats make use of hexidecimal numbers
                    to specify colors.
                </para>
            
            </remarks>
            <seealso cref="M:Thought.Terminals.Translator.ParseHexChar(System.Char)"/>
        </member>
        <member name="M:Thought.Terminals.Translator.OnPrefixChanged">
            <summary>
                Called when the prefix character changes.
            </summary>
            <remarks>
                An inheriting class must call this method when changing the
                prefix character.  The translator will raise an event to notify
                other classes of the change.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translator.ParseHexChar(System.Char)">
            <summary>
                Converts a hexadecimal character to its
                integer value.
            </summary>
            <param name="value">
                A Unicode character.
            </param>
            <remarks>
            
                <para>
                    This is a utility method for the convenience
                    of translator developers.  Many control code
                    protocols make use of hexadecimal numbers to
                    specify colors and other attributes.
                </para>
            
            </remarks>
            <seealso cref="M:Thought.Terminals.Translator.IsHexDigit(System.Char)"/>
        </member>
        <member name="M:Thought.Terminals.Translator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates an embedded control code in a string.
            </summary>
            
            <param name="terminal">
                The output terminal.  The control code should
                manipulate this terminal only.
            </param>
            
            <param name="text">
                A string containing a control code.
            </param>
            
            <param name="index">
                The zero-based index of the start of the control code.
            </param>
            
            <returns>
                The next index to process.  The same index will be returned
                if the code is invalid.
            </returns>
            
            <remarks>
            
                <para>
                    This function will be called by the terminal engine
                    when it encounters any of the characters specified
                    by the <see cref="M:Thought.Terminals.Translator.GetPrefixChars"/> function.  This
                    means the control code may not be syntactically correct;
                    it is up to the translator to determine the validity
                    of the code.
                </para>
            
                <para>
                    The function is expected to return the zero-based index
                    where processing should continue upon return from the
                    function.  This is normally the index of the first character
                    after the control code; however, if the control code is
                    unrecognized (or syntactically incorrect), the function
                    should either return the same starting index passed to
                    the function, or zero.
                </para>
            
                <para>
                    Upon detecting such a value, the terminal engine will
                    either pass the string to the next translator registered
                    against the prefix character, or will send it to the
                    terminal unchanged.
                </para>
            
                <para>
                    The function should not raise an exception unless
                    the parameters are clearly illegal (e.g. a null
                    terminal reference).  Unrecognized or syntactically-incorrect
                    codes should always be handled by returning the original
                    starting index or zero.  This is much faster than
                    generating an exception.  Additionally, an exception is
                    misleading because the code might be valid from the
                    perspective of another translator.  Use the
                    <see cref="M:Thought.Terminals.Translator.ValidateParameters(Thought.Terminals.Terminal,System.String,System.Int32)"/> method to perform the
                    most common parameter checks at the beginning of the
                    method.
                </para>
            
                <para>
                    Do not attempt to optimize processing by executing
                    multiple codes that are adjacent to each other.  Doing
                    so violates the priority of each translator as assigned
                    by the sysop or developer.  If you must implement such
                    an optimization, be sure to make it an optional feature.
                </para>
            
            </remarks>
            <seealso cref="M:Thought.Terminals.Translator.GetPrefixChars"/>
            <seealso cref="M:Thought.Terminals.Translator.ValidateParameters(Thought.Terminals.Terminal,System.String,System.Int32)"/>
        </member>
        <member name="M:Thought.Terminals.Translator.TryParseHexChar(System.Char,System.Byte@)">
            <summary>
                Attempts to parse a hexadecimal character.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translator.ValidateParameters(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Performs common validation of terminal parameters.
            </summary>
            <param name="terminal">
                The terminal that will executed the control code.
            </param>
            <param name="text">
                A string containing a potential code.
            </param>
            <param name="index">
                The index of the potential code in the string.
            </param>
            <remarks>
                An exception is raised if the terminal reference is null,
                the text reference is null, or the index is outside
                of the valid range for the text.  The method should be
                called at the start of the <see cref="M:Thought.Terminals.Translator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)"/> method.
            </remarks>
            <seealso cref="M:Thought.Terminals.Translator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)"/>
        </member>
        <member name="T:Thought.Terminals.TranslatorCollection">
            <summary>
                A general-purpose collection of translators.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.#ctor">
            <summary>
                Creates an empty translator collection.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.#ctor(System.Boolean)">
            <summary>
                Creates an empty translator collection with an option
                to cache prefix characters.
            </summary>
            <param name="cachePrefixes">
                Indicates whether the collection should cache
                a list of translators associated with each
                prefix character.
            </param>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.op_Addition(Thought.Terminals.TranslatorCollection,Thought.Terminals.Translator)">
            <summary>
                Combines a <see cref="T:Thought.Terminals.TranslatorCollection"/> and a <see cref="T:Thought.Terminals.Translator"/>.
            </summary>
            <param name="col">
                A <see cref="T:Thought.Terminals.TranslatorCollection"/>.
            </param>
            <param name="t">
                A <see cref="T:Thought.Terminals.Translator"/>.
            </param>
            <returns>
                A new <see cref="T:Thought.Terminals.TranslatorCollection"/> containing the contents
                of the old translator collection and the new translator.
            </returns>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.op_Addition(Thought.Terminals.Translator,Thought.Terminals.TranslatorCollection)">
            <summary>
                Combines a <see cref="T:Thought.Terminals.TranslatorCollection"/> and a <see cref="T:Thought.Terminals.Translator"/>.
            </summary>
            <param name="t">
                A <see cref="T:Thought.Terminals.Translator"/>.
            </param>
            <param name="c">
                A <see cref="T:Thought.Terminals.TranslatorCollection"/>.
            </param>
            <returns>
                A new <see cref="T:Thought.Terminals.TranslatorCollection"/> containing the contents
                of the old translator collection and the new translator.
            </returns>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.op_Addition(Thought.Terminals.TranslatorCollection,Thought.Terminals.TranslatorCollection)">
            <summary>
                Combines two <see cref="T:Thought.Terminals.TranslatorCollection"/> objects
                into a single collection.
            </summary>
            <param name="c1">The 1st translator collection.</param>
            <param name="c2">The 2nd translator collection.</param>
            <returns>
                A new collection containing all of the translators
                from both collections.
            </returns>
        </member>
        <member name="P:Thought.Terminals.TranslatorCollection.Item(System.Int32)">
            <summary>
                Sets or gets the translator at the specified 0-based collection index.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.Add(Thought.Terminals.Translator)">
            <summary>
                Adds a new translator to the collection.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.AddRange(Thought.Terminals.TranslatorCollection)">
            <summary>
                Adds all of the translators in the specified
                collection to this collection.
            </summary>
            <param name="translators">
                An initialized translator collection.
            </param>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.Clone">
            <summary>
                Creates a shallow copy of the translator collection.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.Contains(Thought.Terminals.Translator)">
            <summary>
                Returns true if the collection contains the specified <see cref="T:Thought.Terminals.Translator"/>.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.GetPrefixTranslators(System.Char)">
            <summary>
                Returns all translators that are known to process
                the specified character.  Translators are 
                returned in the order added to the collection.
            </summary>
            <param name="prefixChar">
                A prefix character to a potential control code.
            </param>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.IndexOf(Thought.Terminals.Translator)">
            <summary>
                Returns the collection index of the specified translator,
                of -1 if the translator has not been added to the
                collection.
            </summary>
            <param name="translator">
                An initialized translator.
            </param>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.Insert(System.Int32,Thought.Terminals.Translator)">
            <summary>
                Inserts a translator into the collection.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.OnInsertComplete(System.Int32,System.Object)">
            <summary>
                Executed when a translator has been inserted
                into the collection.  The collection will 
                cache information about the translator (such as its
                prefix characters) for better performance when
                translating text.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.OnRemoveComplete(System.Int32,System.Object)">
            <summary>
                Overrides the OnRemoteComplete handler in order to
                give the collection an opportunity to update any
                internal indexes.
            </summary>
            <param name="index">
                The zero-based index of the value being removed.
            </param>
            <param name="value">
                The value being removed.
            </param>
        </member>
        <member name="M:Thought.Terminals.TranslatorCollection.Remove(Thought.Terminals.Translator)">
            <summary>
                Removes a translator from the collection.
            </summary>
        </member>
        <member name="T:Thought.Terminals.TranslatorKeyAttribute">
            <summary>
                Identifies the lookup name for a translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TranslatorKeyAttribute.#ctor(System.String)">
            <summary>
                Creates an attribute with the specified name.
            </summary>
            <param name="name">
                The short lookup name of the translator.
            </param>
        </member>
        <member name="P:Thought.Terminals.TranslatorKeyAttribute.Name">
            <summary>
                The keyname of the translator.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.AmbroshiaColorTranslator">
            <summary>
                Interprets known color codes from the Ambroshia BBS door game.
                Ambroshia is an adventure/RPG door game for 32-bit BBS systems.
            </summary>
            <remarks>
            
                <para>
                    An Ambroshia color code is simply the name of a color
                    surrounded by backquotes (`).  This mechanism makes it
                    easy for users to specify colors without understanding
                    hexadecimal formats and other advanced notations.
                </para>
            
                <para>
                    Unfortunately the Ambroshia documentation does not list
                    all supported color names; the codes implemented by
                    this class were based on published documentation as
                    well as low-level analysis of the game program files.
                    This means that full support cannot be guaranteed.
                    Codes marked with a (*) are undocumented.
                </para>
            
                <list type="table">
            
                    <item>
                        <term>`bright blue`</term>
                    </item>
                    <item>
                        <term>`bright cyan`</term>
                    </item>
                    <item>
                        <term>`bright green`</term>
                    </item>
                    <item>
                        <term>`bright magenta`</term>
                    </item>
                    <item>
                        <term>`bright red`</term>
                    </item>
                    <item>
                        <term>`bright white`</term>
                    </item>
                    <item>
                        <term>`bright yellow`</term>
                    </item>
                    <item>
                        <term>`grey`</term>
                    </item>
                    <item>
                        <term>`dark green` (*)</term>
                    </item>
                    <item>
                        <term>`dark red` (*)</term>
                    </item>
                    <item>
                        <term>`yellow` (*)</term>
                    </item>
            
                </list>
            
                <para>
                    Be aware that a backquote prefix is used by the Legend of the
                    Red Dragon (LORD) door game for its color codes.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.AmbroshiaColorTranslator.#ctor">
            <summary>
                Creates a new instance of the Ambroshia color code translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.AmbroshiaColorTranslator.GetPrefixChars">
            <summary>
                Returns an array containing all characters that mark the
                beginning of an Ambroshia color code.
            </summary>
            <remarks>
                <para>
                    The array will contain a single backquote (`) character.
                    This is currently the only prefix character used for
                    Ambroshia color codes.  Note that a backquote is also
                    used for colors in the more popular Legend of the Red
                    Dragon (LORD) game.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.AmbroshiaColorTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates a potential Ambroshia color code.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.AnsiTranslator">
            <summary>
                Translates ANS-BBS escape sequences.
            </summary>
            <seealso cref="T:Thought.Terminals.Translators.AvatarTranslator"/>
        </member>
        <member name="M:Thought.Terminals.Translators.AnsiTranslator.#ctor">
            <summary>
                Creates a new ANSI-BBS translator.
            </summary>
        </member>
        <member name="P:Thought.Terminals.Translators.AnsiTranslator.DebugMode">
            <summary>
                Enables or disables debug mode.
            </summary>
            <remarks>
                If enabled, unrecognized ANSI-BBS sequences are written
                to the screen with the escape character changed to the
                letters "ESC".  This changes the escape sequence to printable
                text and allows you to see it on the remote terminal.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.AnsiTranslator.GetPrefixChars">
            <summary>
                Returns a character array containing all prefix
                characters for the ANSI-BBS protocol.
            </summary>
            <returns>
                A character array containing only the escape (ASCII 27)
                character.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translators.AnsiTranslator.ParseAnsi(System.String,System.Int32,System.Int32@,System.Collections.ArrayList@,System.Char@)">
            <summary>
                Parses an ANSI escape sequence.
            </summary>
            <param name="text">
                A string containing an ANSI escape sequence.
            </param>
            <param name="index">
                The starting index of the escape sequence.
            </param>
            <param name="ansiLength">
                The parsed length of the escape sequence.
            </param>
            <param name="ansiParams">
                The raw parameters extracted from the sequence.
            </param>
            <param name="ansiCommand">
                The parsed command letter of the sequence.
            </param>
            <returns>
                True if the escape sequence was correctly formatted.
            </returns>
        </member>
        <member name="P:Thought.Terminals.Translators.AnsiTranslator.StripUnrecognizedCodes">
            <summary>
                Enables or disables filtering of unrecognized X3.64 or
                compatible escape sequences.
            </summary>
            <remarks>
                Unrecognized codes are filtered by default.  This is a security
                precaution that stops hackers from generating sequences that
                remap keystrokes or perform terminal configurations.  Such codes
                could be sent in an email and blindly executed by the remote
                terminal software of the target victim.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.AnsiTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates a potential ANSI-BBS escape sequence.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.AtCommentTranslator">
            <summary>
                Translates at-comments.
            </summary>
            <remarks>
            
                <para>
                    This translator allows the sysop to place comments
                    in a text file.  A comma is prefixed with the two
                    characters "@;".  Anything after the at-symbol and
                    semicolon are ignored, until the end of the line.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.AtCommentTranslator.GetPrefixChars">
            <summary>
                Returns an array containing a single at-symbol (@).
                This is used by the terminal engine to identify this
                translator as a potential handler when the symbol
                is encountered in an output string.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.AtCommentTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates an at-comment in an output string.
            </summary>
            <param name="terminal">
                The destination terminal of the string.
            </param>
            <param name="text">
                A string containing a potential control code.
            </param>
            <param name="index">
                The index of the control code.
            </param>
        </member>
        <member name="T:Thought.Terminals.Translators.AvatarTranslator">
            <summary>
                Translates AVATAR color and cursor codes.
            </summary>
            <remarks>
                <para>
                    This class interprets basic AVATAR color and cursor
                    codes.  AVATAR was a FidoNet proposed standard for controlling
                    a terminal using simple and efficient binary codes.  The
                    standard was supported by many DOS-based bulletin board
                    systems, door games, and terminal emulators.
                </para>
                <para>
                    Advanced codes, such as those that manipulate windows, are
                    not supported by the translator.  Only the original AVT/0
                    standard is supported.
                </para>
            </remarks>
            <seealso cref="T:Thought.Terminals.Translators.AnsiTranslator"/>
        </member>
        <member name="M:Thought.Terminals.Translators.AvatarTranslator.#ctor">
            <summary>
                Creates a new AVATAR translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.AvatarTranslator.GetPrefixChars">
            <summary>
                Builds an array of every character that marks the 
                beginning of a potential AVATAR code.
            </summary>
            <returns>
                An array with three characters: a control-L, a 
                control-v, and a control-Y.  The Control-L character
                is used to clear the screen; a Control-V character
                is the prefix for most AVATAR codes; a Control-Y
                character is the start of an expansion code.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translators.AvatarTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates an AVATAR code in an output stream.
            </summary>
            <param name="terminal">
                The terminal on which to execute the control code.
            </param>
            <param name="text">
                A string containing a potential AVATAR code.
            </param>
            <param name="index">
                The index of the first AVATAR character.
            </param>
        </member>
        <member name="T:Thought.Terminals.Translators.DataSourceMacroTranslator">
            <summary>
                Expands macros using fields from a data source.
            </summary>
            <remarks>
                <para>
                    A macro is an embedded text code in the format {MacroName};
                    this class expands macros that have the same name as a column
                    or field in a data source.  Support data sources are 
                    IDataRecords, DataRows, and Hashtables.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.DataSourceMacroTranslator.#ctor">
            <summary>
                Creates a new data source macro translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.DataSourceMacroTranslator.#ctor(System.Object)">
            <summary>
                Initializes the macro expander against the specified
                data source.
            </summary>
        </member>
        <member name="P:Thought.Terminals.Translators.DataSourceMacroTranslator.DataSource">
            <summary>
                Sets the table or record that acts as a source
                of data for macro expansions.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.DataSourceMacroTranslator.Expand(System.String)">
            <summary>
                Returns the value of a named field from the data source.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.DataSourceMacroTranslator.ExpandDataRecord(System.String,System.Data.IDataRecord)">
            <summary>
                Performs expansion from an IDataRecord data source.
            </summary>
            <param name="name">
                The name of the field.
            </param>
            <param name="record">
                The IDataRecord datra source.
            </param>
        </member>
        <member name="M:Thought.Terminals.Translators.DataSourceMacroTranslator.ExpandDataRow(System.String,System.Data.DataRow)">
            <summary>
                Expands a macro from a DataRow record.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.DataSourceMacroTranslator.ExpandHashTable(System.String,System.Collections.Hashtable)">
            <summary>
                Expands a named key from a hash table.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.EzycomColorTranslator">
            <summary>
                Implements an Ezycom BBS color translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.EzycomColorTranslator.#ctor">
            <summary>
                Creates a new instance of the Ezycom BBS color translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.EzycomColorTranslator.GetPrefixChars">
            <summary>
                Builds a character array containing all characters that
                mark the beginning of a potential Ezycom color code.
            </summary>
            <returns>
                A character array containing the pipe (|) character
                as a single element.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translators.EzycomColorTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates an Ezycom BBS color code at the specified position in a string.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.IsaTranslator">
            <summary>
                Translates ISA control codes as described in the A.N.G.E.L.
                BBS and door development kit.
            </summary>
            <remarks>
                <para>
                    This class implements support for so-called ISO color codes.
                    Not much is known about the format -- a reference was found
                    in the documentation for the A.N.G.E.L. door development kit.
                    The behavior of this translator is based on documentation that
                    may not be exactly the same as the door kit.
                </para>
                <para>
                    An ISA code is always four characters in length.  A code starts
                    with a blackslash (\) and a carrot (^), followed by either the
                    desired color in hexadecimal format or "LF" to insert a carriage
                    return/line feed sequence, or "CL" to clear the screen.  The
                    LF and CL codes are not case-sensitive.
                </para>
                <para>
                    The A.N.G.E.L. door development kit is copyright 2002 Atlantic
                    Software; it was written by Jimmy Rose and Andy Stewert.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.IsaTranslator.#ctor">
            <summary>
                Creates a new ISA control code translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.IsaTranslator.GetPrefixChars">
            <summary>
                Builds a character array containing all characters that mark
                the beginning of a potential ISA code.
            </summary>
            <returns>
                A character array containing a single backslash character.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translators.IsaTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates a potential ISA control code.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.KDriveTranslator">
            <summary>
                The KDriveTranslator class interprets a subset of the control
                codes introduced by the circa-1990s KDrive door development kit.
            </summary>
            
            <remarks>
            
                <list type="table">
                    <item>
                        <term>^PB#</term>
                        <description>
                            Changes the current background color.  The
                            background color is specified as a hexadecimal
                            digit.
                        </description>
                    </item>
                    <item>
                        <term>^PC##</term>
                        <description>
                            Changes the current color.  The color is specified
                            with its hexadecimal value padded to two digits.
                            For example ^KC17 changes the current color to
                            gray on a blue background.
                        </description>
                    </item>
                    <item>
                        <term>^PF#</term>
                        <description>
                            Changes the current foreground color.  The foreground
                            color is specified as a hexadecimal digit.
                        </description>
                    </item>
                    <item>
                        <term>^PP</term>
                        <description>
                            Pauses the screen.  It is not known if KDrive
                            displayed a prompt.  Please inform the author.
                        </description>
                    </item>
                    <item>
                        <term>^PW</term>
                        <description>
                            Clears the screen.
                        </description>
                    </item>
                    <item>
                        <term>^PX##</term>
                        <description>
                            Changes the horizontal column of the cursor, where
                            the column is specified as a decimal number padded
                            to two digits (e.g. 01 to 80).  Columns are 1-based.
                        </description>
                    </item>
                    <item>
                        <term>^PY##</term>
                        <description>
                            Changes the vertical row of the cursor, where
                            the row is specified as a decimal number padded
                            to two digits (e.g. 01 to 25).  Rows are 1-based.
                        </description>
                    </item>
                    <item>
                        <term>^P!</term>
                        <description>Not supported (see remarks).</description>
                    </item>
                    <item>
                        <term>^P"</term>
                        <description>Not supported (see remarks).</description>
                    </item>
                    <item>
                        <term>^P#</term>
                        <description>Not supported (see remarks).</description>
                    </item>
                </list>
            
                <para>
                    KDrive supported three special codes to
                    control the output of text.  The ^P" code directed
                    output to the local (sysop) window, the ^P# code directed
                    output to the remote system, and the ^P! restored the
                    output to both windows.  These codes are not supported
                    by this translator.
                </para>
            
                <para>
                    This translator is based on documentation provided
                    with versions 6.0, 6.01, 6.2 and 7.0 of the KDrive
                    Door Game Tool Kit (copyright 1992 SHARKware).  Other
                    versions have not been located for reference.  KDrive
                    has apparently been abandoned.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.KDriveTranslator.#ctor">
            <summary>
                Creates a new KDrive control code translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.KDriveTranslator.GetPrefixChars">
            <remarks>
                The KDrive translator always returns an array with
                a single control-p character.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.KDriveTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Interprets a potential KDrive control code.
            </summary>
            <param name="terminal">
                The output terminal that will be used to execute color
                and cursor control codes.
            </param>
            <param name="text">
                The text containing a potential KDrive control code.
            </param>
            <param name="index">
                The index of the starting character of the code.
            </param>
            <returns></returns>
        </member>
        <member name="T:Thought.Terminals.Translators.MacroTranslator">
            <summary>
                Implements functionality common to all basic macro
                translators.  A macro has the format {MacroName} or
                {MacroName:Format}.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Translators.MacroTranslator.DefaultPadding">
            <summary>
                The default character to use for padding.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Translators.MacroTranslator.DefaultPrefix">
            <summary>
                The default prefix character that marks the start of a macro.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Translators.MacroTranslator.DefaultSuffix">
            <summary>
                The default suffix character that marks the end of a macro.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.MacroTranslator.#ctor">
            <summary>
                Initializes the macro translator with default values.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.MacroTranslator.#ctor(System.Char)">
            <summary>
                Initializes the macro translator with the specified
                character that will act as the prefix and suffix
                characters.
            </summary>
            <param name="prefixAndSuffix">
                The prefix and suffix character for a macro string.
            </param>
        </member>
        <member name="M:Thought.Terminals.Translators.MacroTranslator.#ctor(System.Char,System.Char)">
            <summary>
                Initializes the macro translator with the specified properties.
            </summary>
            <param name="prefix">
                The prefix character that marks the beginning of a macro string.
            </param>
            <param name="suffix">
                The suffix character that marks the end of the macro string.
            </param>
        </member>
        <member name="M:Thought.Terminals.Translators.MacroTranslator.Expand(System.String)">
            <summary>
                Returns the whole (unformatted) value of the
                specified macro name.  This is implemented by derived
                classes.
            </summary>
            <param name="name">
                The name of a macro to be examined by the inherited class.
            </param>
            <returns>
                The whole (unformatted) value of the macro, or null
                if the name is unrecognized.
            </returns>
            <remarks>
                <para>
                    The implementing class should not raise an
                    exception if the name is unrecognied.
                    Multiple macro translators may be active at the
                    same time; instead the function should return null
                    for unrecognized macros.  Recognized (but blank)
                    macros should return an empty string, even if the
                    underlying value of the macro is null.  For example,
                    if a date macro is null, the function should return
                    an empty string.  A null value will cause the macro
                    translator to believe the name was unrecognized.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.MacroTranslator.GetPrefixChars">
            <summary>
                Builds a character array containing the prefix (starting character)
                of the macro translator.
            </summary>
            <returns>
                A single character array containing the the prefix character
                that was used to initialize the class.
            </returns>
        </member>
        <member name="P:Thought.Terminals.Translators.MacroTranslator.Padding">
            <summary>
                The padding character to use when justifying expanded macros.
            </summary>
        </member>
        <member name="P:Thought.Terminals.Translators.MacroTranslator.PaddingStyle">
            <summary>
                The padding color (optional).
            </summary>
        </member>
        <member name="P:Thought.Terminals.Translators.MacroTranslator.Prefix">
            <summary>
                The character that marks the start of a macro string.
            </summary>
        </member>
        <member name="P:Thought.Terminals.Translators.MacroTranslator.Suffix">
            <summary>
                The character that marks the end of a macro string.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.MacroTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates text containing a potential macro.
            </summary>
            <param name="terminal">
                The terminal that receives output.
            </param>
            <param name="text">
                The text to parse.
            </param>
            <param name="index">
                The zero-based starting index where parsing
                should begin.  This is always the prefix character
                for macros.
            </param>
            <returns>
                The zero-based index where processing should continue
                by the terminal (and other translators).  An invalid index
                is treated by the terminal engine as an unrecognized 
                control code that can be sent as raw text or passed to
                another translator.
            </returns>
        </member>
        <member name="T:Thought.Terminals.Translators.NexusColorTranslator">
            <summary>
                Interprets Nexus color codes.
            </summary>
            
            <remarks>
            
                <para>
                    A Nexus color code has the format %FFB%, where FF is
                    the decimal foreground color (00 to 15) and B is the
                    decimal background color (0 to 7).  The code is always
                    exactly five characters in length.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.NexusColorTranslator.#ctor">
            <summary>
                Creates a new Nexus color code translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.NexusColorTranslator.GetPrefixChars">
            <summary>
                Builds an array containing all characters that mark the
                beginning of a potential Nexus color code.
            </summary>
            <returns>
                A character array containing a percent symbol as the only element.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translators.NexusColorTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates a Nexus color code in a string.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.PCBoardColorTranslator">
            <summary>
                Translates PCBoard color codes.  These codes have the
                format @XX@, where XX is the padded, two-digit hexadecimal
                value of a color.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.PCBoardColorTranslator.#ctor">
            <summary>
                Creates a new PCBoard color code translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.PCBoardColorTranslator.GetPrefixChars">
            <summary>
                Returns an character array containing a single
                "at" (@) symbol.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.PCBoardColorTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates a potential PCBoard BBS color code.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.PCBoardMacroTranslator">
            <summary>
                Translates PCBoard macro codes like "@CLS@".
            </summary>
        </member>
        <member name="F:Thought.Terminals.Translators.PCBoardMacroTranslator.AtSymbol">
            <summary>
                The at-symbol (@) prefix character.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.PCBoardMacroTranslator.GetPrefixChars">
            <summary>
                Builds an array containing all characters that mark the
                beginning of a PCBoard color code.
            </summary>
            <returns>
                A character array containing the at-symbol (@) as the
                only element.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translators.PCBoardMacroTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates PCBoard color codes in a string.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.RemoteAccessColorTranslator">
            <summary>
                Interprets RemoteAccess BBS color codes.
            </summary>
            
            <remarks>
            
                <para>
                    RemoteAccess was a DOS bulletin board system by Andrew
                    Milner of Wantree Development in Perth, Australia.  The
                    rights to the software were later sold to Bruce Morse
                    of the United States, who appears to have abandoned the
                    product.
                </para>
            
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.RemoteAccessColorTranslator.#ctor">
            <summary>
                Creates a new RemoteAccess color translator.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.RemoteAccessColorTranslator.GetPrefixChars">
            <summary>
                Builds an array containing all characters that mark the
                start of a supported RemoteAccess control code.
            </summary>
            <returns>
                A character array containing a Control-K and a Control-L.
                The Control-K marks the start of a color code; the 
                Control-L clears the screen.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translators.RemoteAccessColorTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates a potential RemoteAccess control code.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.SynchronetColorTranslator">
            <summary>
                Implements a subset of the Synchronet v3 BBS color
                and cursor codes.  
            </summary>
            
            <remarks>
            
                <para>
                    The Synchronet BBS is one of the few packages
                    that survived the collapse of the BBS community after
                    the widespread introduction to the Internet.  Synchronet
                    is available for download from http://www.synchro.net.
                </para>
            
                <para>
                    This translator implements a subset of the color and
                    text-related codes, as defined in version 3 of the Synchronet
                    documentation.  
                </para>
            
            </remarks>
        </member>
        <member name="P:Thought.Terminals.Translators.SynchronetColorTranslator.AbsorbUnsupportedCodes">
            <summary>
                Defines the behavior of recognized but unsupported
                control codes.  If unsupported codes are absorbed, they
                will not be processed and will not be displayed as raw
                text in the terminal.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.SynchronetColorTranslator.GetPrefixChars">
            <summary>
                Builds a character array containing all characters that
                mark the start of a potential Synchronet control code.
            </summary>
            <returns>
                A character array containing a single Control-A character.
            </returns>
        </member>
        <member name="M:Thought.Terminals.Translators.SynchronetColorTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates a potential Synchronet BBS control code.
            </summary>
        </member>
        <member name="T:Thought.Terminals.Translators.XCodeTranslator">
            <summary>
                Translates GAP BBS XCode strings.  An XCode is a control
                code in the format pXnn, where p is a sysop-defined prefix
                character, X is an upper-case X, and nn is a two-character
                hexadecimal number.
            </summary>
            <remarks>
                <para>
                  GAP collapsed double-instances of the prefix character.
                  For example, if the prefix was defined as "@", then "@@"
                  would be collapsed to a single "@".
                </para>
            </remarks>
        </member>
        <member name="F:Thought.Terminals.Translators.XCodeTranslator.collapseDoubles">
            <summary>
                Tracks whether or not the sysop wants to collapse
                double instances of the prefix character.
            </summary>
        </member>
        <member name="F:Thought.Terminals.Translators.XCodeTranslator.prefix">
            <summary>
                Tracks the prefix character (the default is '@').
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.XCodeTranslator.#ctor">
            <summary>
                Creates a new x-code translator with default values. 
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.XCodeTranslator.#ctor(System.Char)">
            <summary>
                Creates a new x-code transator with the specified
                character as a prefix character.
            </summary>
            <param name="prefix">
                A Unicode character.
            </param>
            <remarks>
                Do not specify a character that is likely to appear
                in text, such as an English letter or number.
            </remarks>
        </member>
        <member name="P:Thought.Terminals.Translators.XCodeTranslator.CollapseDoubles">
            <summary>
                Indicates whether or not the translator
                should collapse double prefix characters.
            </summary>
        </member>
        <member name="M:Thought.Terminals.Translators.XCodeTranslator.GetPrefixChars">
            <summary>
                Returns an array containing the <see cref="P:Thought.Terminals.Translators.XCodeTranslator.Prefix"/>
                configured for the translator.
            </summary>
        </member>
        <member name="P:Thought.Terminals.Translators.XCodeTranslator.Prefix">
            <summary>
                The sysop-defined prefix of the GAP codes.
            </summary>
            <remarks>
                You must re-register the translator when changing the prefix character.
                This is necessary because the translation engine caches prefix information
                for improved performance.  Changing the prefix invalidates any cached
                information.  It is safe to change the sysop-defined prefix before
                registration.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.Translators.XCodeTranslator.Translate(Thought.Terminals.Terminal,System.String,System.Int32)">
            <summary>
                Translates a GAP-style BBS code at the specified position in a string.
            </summary>
        </member>
        <member name="T:Thought.Terminals.CgaHighBit">
            <summary>
                Possible meanings for the high bit of a CGA/DOS color attribute.
            </summary>
        </member>
        <member name="F:Thought.Terminals.CgaHighBit.Blink">
            <summary>
                The high bit indicates blinking.
            </summary>
        </member>
        <member name="F:Thought.Terminals.CgaHighBit.BrightBackground">
            <summary>
                The high bit indicates a bright background.
            </summary>
        </member>
        <member name="F:Thought.Terminals.CgaHighBit.Ignore">
            <summary>
                The high bit is ignored.
            </summary>
        </member>
        <member name="T:Thought.Terminals.CommonStyles">
            <summary>
                Factory methods for creating common styles.
            </summary>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.BrightWhiteOnBlack">
            <summary>
                A bright white foreground over a black background.
            </summary>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.CyanOnBlack">
            <summary>
                A cyan foreground over a black background.
            </summary>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.DarkGrayOnBlack">
            <summary>
                A dark gray foreground over a black background.
            </summary>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.DarkGrayOnBlue">
            <summary>
                A dark gray foreground over a blue background.
            </summary>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.DefaultAvatar">
            <summary>
                The default AVATAR style, which is a cyan foreground
                over a black background.
            </summary>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.DefaultDos">
            <summary>
                The default DOS style, which is a white/gray foreground
                over a black background.
            </summary>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.GreenOnBlack">
            <summary>
                A green foreground over a black background.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.RedOnBlack">
            <summary>
                A red foreground over a black background.
            </summary>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.WhiteOnBlack">
            <summary>
                A white foreground color and a black background color.
            </summary>
        </member>
        <member name="M:Thought.Terminals.CommonStyles.WhiteOnBlue">
            <summary>
                A white foreground color and a blue background color.
            </summary>
        </member>
        <member name="T:Thought.Terminals.SerialTerminal">
            <summary>
                Implements a driver for serial-based remote terminals that
                use ANSI X3.64 or a similar string-oriented protocol for 
                controlling the display.
            </summary>
            <seealso cref="T:Thought.Terminals.SystemTerminal"/>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.#ctor(System.IO.Stream)">
            <summary>
                Initializes the driver against the specified stream.
            </summary>
            <param name="stream">
                A stream that will be used for both input and output.
            </param>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.#ctor(System.IO.Stream,System.IO.Stream)">
            <summary>
                Initializes the driver against input and output streams.
            </summary>
            <param name="input">
                The stream to be used for input.
            </param>
            <param name="output">
                The stream to be used for output.
            </param>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.Beep">
            <summary>
                Sends a command to sound a beep.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.ClearRow">
            <summary>
                Sends a command to clear the current row.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.ClearRowBeginning">
            <summary>
                Sends a command to clear the text between the start
                of the row and the cursor.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.ClearRowEnding">
            <summary>
                Sends a command to clear the text between the
                cursor and the end of the row.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.ClearScreen">
            <summary>
                Sends a command to clear the screen.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.ClearScreenBeginning">
            <summary>
                Sends a command to clear the text between the
                start of the screen and the cursor.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.ClearScreenEnding">
            <summary>
                Sends a command to clear the text between
                the cursor and the end of the screen.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.Close">
            <summary>
                Closes the remote terminal streams.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.GetStyle">
            <summary>
                Returns the current <see cref="T:Thought.Terminals.TextStyle"/> that
                is used when writing text.
            </summary>
            <returns>
                The current <see cref="T:Thought.Terminals.TextStyle"/>
            </returns>
        </member>
        <member name="P:Thought.Terminals.SerialTerminal.InputStream">
            <summary>
                The stream used to read from the remote terminal.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.MoveCursor(System.Int32,System.Int32)">
            <summary>
                Send a command to move the cursor.
            </summary>
            <param name="column">
                The zero-based column.
            </param>
            <param name="row">
                The zero-based row.
            </param>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.MoveCursorDown(System.Int32)">
            <summary>
                Sends a command to move the cursor downward.
            </summary>
            <param name="rows">
                The number of rows to move downward.
            </param>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.MoveCursorHome">
            <summary>
                Sends a command to move the cursor to the
                home position in the upper-left corner of
                the screen.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.MoveCursorLeft(System.Int32)">
            <summary>
                Sends a command to move the cursor to the left.
            </summary>
            <param name="columns">
                The number of columns to move.
            </param>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.MoveCursorRight(System.Int32)">
            <summary>
                Sends a command to move the cursor to the right.
            </summary>
            <param name="columns">
                The number of columns to move.
            </param>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.MoveCursorUp(System.Int32)">
            <summary>
                Sends a command to move the cursor upward.
            </summary>
            <param name="rows">
                The number of rows to move upward.
            </param>
        </member>
        <member name="P:Thought.Terminals.SerialTerminal.OutputStream">
            <summary>
                The stream used to write to the remote terminal.
            </summary>
        </member>
        <member name="P:Thought.Terminals.SerialTerminal.Protocol">
            <summary>
                The protocol driver that defines the strings
                to be sent to the remote terminal when performing
                screen operations.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.ReadChar">
            <summary>
                Read a character from the remote terminal.
            </summary>
            <returns>
                The next available character.
            </returns>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.SetStyle(Thought.Terminals.TextStyle)">
            <summary>
                Sends a command to change the color.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.Write(System.Char)">
            <summary>
                Writes a character to the output stream.
            </summary>
            <param name="value">
                The character to write to the stream.
            </param>
        </member>
        <member name="M:Thought.Terminals.SerialTerminal.Write(System.String)">
            <summary>
                Writes a string to the remote terminal.
            </summary>
            <param name="value">
                The string to write to the terminal.
            </param>
        </member>
        <member name="T:Thought.Terminals.SystemTerminal">
            <summary>
                Implements a terminal for the system console.
            </summary>
            <seealso cref="T:Thought.Terminals.SerialTerminal"/>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.Beep">
            <summary>
                Plays a beep on the terminal.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.ClearRow">
            <summary>
                Clears the current row.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.ClearRowBeginning">
            <summary>
                Clears the text between the beginning of the current row
                and the cursor.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.ClearRowEnding">
            <summary>
                Clears the text between the cursor and the end of the row.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.ClearScreen">
            <summary>
                Clears the screen.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.ConvertBackground(System.Byte)">
            <summary>
                Gets the ConsoleColor that corresponds to the background
                color of a CGA/DOS color attribute.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.ConvertForeground(System.Byte)">
            <summary>
                Gets the ConsoleColor that corresponds to the foreground
                color of a CGA/DOS color attribute.
                Converts a CGA
            </summary>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.GetStyle">
            <summary>
                Returns the current <see cref="T:Thought.Terminals.TextStyle"/>.
            </summary>
            <returns>
                The current <see cref="T:Thought.Terminals.TextStyle"/>.
            </returns>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.MoveCursor(System.Int32,System.Int32)">
            <summary>
                Moves the cursor to the designated position.
            </summary>
            <param name="column">
                The zero-based column number.
            </param>
            <param name="row">
                The zero-based row number.
            </param>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.MoveCursorDown(System.Int32)">
            <summary>
                Moves the cursor downward by the specified number of rows.
            </summary>
            <param name="rows">
                The number of rows to move downward.
            </param>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.MoveCursorLeft(System.Int32)">
            <summary>
                Moves the cursor to the left.
            </summary>
            <param name="columns">
                The number of columns to move to the left.
            </param>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.MoveCursorHome">
            <summary>
                Moves the cursor to the home position.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.MoveCursorRight(System.Int32)">
            <summary>
                Moves the cursor to the right.
            </summary>
            <param name="columns">
                The number of columns to move to the right.
            </param>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.MoveCursorUp(System.Int32)">
            <summary>
                Moves the cursor upward.
            </summary>
            <param name="rows">
                The number of rows to move upward.
            </param>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.ReadChar">
            <summary>
                Reads a single character from the console.
            </summary>
            <returns>
                The next available character.
            </returns>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.SetStyle(Thought.Terminals.TextStyle)">
            <summary>
                Sets the color.
            </summary>
        </member>
        <member name="M:Thought.Terminals.SystemTerminal.Write(System.Char)">
            <summary>
                Writes the specified character to the output stream.
            </summary>
            <param name="value">
                The character to write to the stream.
            </param>
        </member>
        <member name="T:Thought.Terminals.JustifyText">
            <summary>
                Text justification options.
            </summary>
        </member>
        <member name="F:Thought.Terminals.JustifyText.Left">
            <summary>
                The text is left-justified.
            </summary>
        </member>
        <member name="F:Thought.Terminals.JustifyText.Center">
            <summary>
                The text is centered.
            </summary>
        </member>
        <member name="F:Thought.Terminals.JustifyText.Right">
            <summary>
                The text is right-justified.
            </summary>
        </member>
        <member name="T:Thought.Terminals.TextBlinking">
            <summary>
                The blinking rate of a text.
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextBlinking.None">
            <summary>
                No blinking.
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextBlinking.Fast">
            <summary>
                Fast blinking (150 or more per minute).
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextBlinking.Slow">
            <summary>
                Slow blinking (less than 150 per minute).
            </summary>
        </member>
        <member name="T:Thought.Terminals.TextColor">
            <summary>
                The color of text or a background.
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextColor.Black">
            <summary>
                The color black
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextColor.Blue">
            <summary>
                The color blue
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextColor.Green">
            <summary>
                The color dark green
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextColor.Cyan">
            <summary>
                The color dark cyan
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextColor.Red">
            <summary>
                The color dark red
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextColor.Magenta">
            <summary>
                The color dark magenta
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextColor.Yellow">
            <summary>
                The color dark yellow (brown)
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextColor.White">
            <summary>
                The color gray
            </summary>
        </member>
        <member name="T:Thought.Terminals.TextIntensity">
            <summary>
                The intensity of text written to the terminal.
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextIntensity.Normal">
            <summary>
                Normal intensity (not faint and not bold)
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextIntensity.Bold">
            <summary>
                Bold intensity
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextIntensity.Faint">
            <summary>
                Faint intensity (not widely supported)
            </summary>
        </member>
        <member name="T:Thought.Terminals.TextStyle">
            <summary>
                Represents the visual appearance of text.
            </summary>
            <remarks>
                <para>
                    This class describes the visual appearance of text
                    such as its foreground color and intensity.  The
                    properties are largely based on the ANSI X3.64 and
                    similar standards.  Note that not all terminals
                    support all of the properties.
                </para>
            </remarks>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor">
            <summary>
                Creates a blank text style with normal white
                text over a black background.  No special
                attributes are set.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(System.ConsoleColor)">
            <summary>
                Initializes the text style by converting a 
                System.ConsoleColor.
            </summary>
            <param name="consoleForeground">
                The foreground color encoded as a System.ConsoleColor.
            </param>
            <remarks>
                The System.ConsoleColor enumeration is not the same as
                the <see cref="T:Thought.Terminals.TextColor"/> enumeration and cannot be
                used interchangeably without conversion.  The TextColor
                enumeration is based on the ANSI X3.64 standard, while
                the ConsoleColor enumeration is based on Microsoft
                conventions.  Additionally, while some of the field names
                are the same, the underlying values and meanings are
                different.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(System.ConsoleColor,System.ConsoleColor)">
            <summary>
                Initializes the TextStyle with the specified
                System.ConsoleColor foreground and background colors.
            </summary>
            <param name="foreground">
                The foreground defined as a System.ConsoleColor value.
            </param>
            <param name="background">
                The background defined as a System.ConsoleColor value.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(Thought.Terminals.TextColor)">
            <summary>
                Initializes the text style to the specified foreground
                color over a black background.
            </summary>
            <param name="foregroundColor">
                The desired foreground color.
            </param>
            <remarks>
                The background color is black with all special 
                attributes like intensity and blinking set to
                their default values.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(Thought.Terminals.TextColor,Thought.Terminals.TextColor)">
            <summary>
                Initializes the text style to the specified
                foreground and background colors.
            </summary>
            <param name="foregroundColor">
                The foreground color.
            </param>
            <param name="backgroundColor">
                The background color.
            </param>
            <remarks>
                All other style attributes, such as the intensity 
                and blinking status, are set to their default values.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(Thought.Terminals.TextColor,Thought.Terminals.TextIntensity)">
            <summary>
                Initializes the text style to the specified
                foreground color and foreground intensity.
            </summary>
            <param name="foregroundColor">
                The foreground color.
            </param>
            <param name="foregroundIntensity">
                The foreground intensity.
            </param>
            <remarks>
                The background color is black.  Note that a faint
                intensity is not widely supported.  For example, the
                Windows/DOS console window supports normal and 
                bold intensities only.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(Thought.Terminals.TextColor,Thought.Terminals.TextIntensity,Thought.Terminals.TextColor)">
            <summary>
                Initializes the text style with the specified foreground
                color, foreground intensity, and background color.
            </summary>
            <param name="foregroundColor">
                The foreground color.
            </param>
            <param name="foregroundIntensity">
                The foreground intensity.
            </param>
            <param name="backgroundColor">
                The background color.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(Thought.Terminals.TextStyle)">
            <summary>
                Initializes the text style by copying the properties
                of an existing text style.
            </summary>
            <param name="copyFrom">
                The style to copy from.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(Thought.Terminals.TextStyle,System.Int32[])">
            <summary>
                Initializes the text style by copying the properties
                of an existing text style.
            </summary>
            <param name="copyFrom">
                The style to copy from.
            </param>
            <param name="sgrParameters">
                An array of Set Graphics Rendition values from
                the X3.64 or ECMA-48 standards.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(System.Byte,Thought.Terminals.CgaHighBit)">
            <summary>
                Initializes the text style based on a CGA/DOS attribute.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TextStyle.#ctor(System.Byte,System.Byte,Thought.Terminals.CgaHighBit)">
            <summary>
                Initialize the text style to a CGA-encoded foreground
                and background color.
            </summary>
            <param name="cgaForeground">
                The foreground encoded as a CGA attribute.
            </param>
            <param name="cgaBackground">
                The background encoded as a CGA attribute.
            </param>
            <param name="highBitMeaning">
                The meaning of the high bit in the CGA background.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.ApplyGraphicRenditions(System.Int32[])">
            <summary>
                Applies a series of Select Graphic Rendition
                parameters from the X3.64 standard (also known
                as ANSI-BBS, ECMA-48 and ISO/IEC 6429).
            </summary>
            <param name="parameters">
                An integer array containing rendition parameters
                per the specification.  Parameters are applied
                in the order listed in the array.
            </param>
            <remarks>
                <para>
                    The list of parameters is defined in
                    section 8.3.117 of ECMA-48.  Not all ECMA-48
                    parameters are supported.
                </para>
                <para>
                    Some terminals (e.g. SCO ANSI, AIXTERM) support
                    parameters to set the foreground and background
                    to bright colors.  These parameters are in the
                    range of 90 to 97 and 100 to 107.  Unfortunately
                    documentation is lacking and both terminals use
                    different color values.  These extended 
                    parameters are not supported.
                </para>
            </remarks>
        </member>
        <member name="P:Thought.Terminals.TextStyle.BackgroundColor">
            <summary>
                The background color.
            </summary>
            <seealso cref="P:Thought.Terminals.TextStyle.BackgroundIntensity"/>
            <seealso cref="P:Thought.Terminals.TextStyle.ForegroundColor"/>
            <seealso cref="P:Thought.Terminals.TextStyle.ForegroundIntensity"/>
        </member>
        <member name="P:Thought.Terminals.TextStyle.BackgroundIntensity">
            <summary>
                The intensity of the background.
            </summary>
            <seealso cref="P:Thought.Terminals.TextStyle.BackgroundColor"/>
            <seealso cref="P:Thought.Terminals.TextStyle.ForegroundColor"/>
            <seealso cref="P:Thought.Terminals.TextStyle.ForegroundIntensity"/>
        </member>
        <member name="P:Thought.Terminals.TextStyle.Blinking">
            <summary>
                The blinking state of the text.
            </summary>
            <remarks>
                The blinking rate is always fast on DOS/IBM systems.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.TextStyle.Clone">
            <summary>
                Builds a copy of the text style.
            </summary>
            <returns>
                A <see cref="T:Thought.Terminals.TextStyle"/> with the identical properties.
            </returns>
        </member>
        <member name="M:Thought.Terminals.TextStyle.CloneBlinking">
            <summary>
                Clones the current style while enabling blinking.
            </summary>
            <returns>
                A copy of the current style with the
                <see cref="P:Thought.Terminals.TextStyle.Blinking"/> property to fast.
            </returns>
        </member>
        <member name="M:Thought.Terminals.TextStyle.CloneBolded">
            <summary>
                Builds a copy of the text style but with the foreground bolded.
            </summary>
            <returns>
                A <see cref="T:Thought.Terminals.TextStyle"/> with identical properties except
                for the foreground intensity, which is bolded.
            </returns>
        </member>
        <member name="P:Thought.Terminals.TextStyle.ForegroundColor">
            <summary>
                The foreground color.
            </summary>
            <seealso cref="P:Thought.Terminals.TextStyle.BackgroundColor"/>
            <seealso cref="P:Thought.Terminals.TextStyle.BackgroundIntensity"/>
            <seealso cref="P:Thought.Terminals.TextStyle.ForegroundIntensity"/>
        </member>
        <member name="P:Thought.Terminals.TextStyle.ForegroundIntensity">
            <summary>
                The intensity of the foreground.
            </summary>
            <seealso cref="P:Thought.Terminals.TextStyle.BackgroundColor"/>
            <seealso cref="P:Thought.Terminals.TextStyle.BackgroundIntensity"/>
            <seealso cref="P:Thought.Terminals.TextStyle.ForegroundColor"/>
        </member>
        <member name="P:Thought.Terminals.TextStyle.Hidden">
            <summary>
                The visibility of the text.
            </summary>
        </member>
        <member name="P:Thought.Terminals.TextStyle.Italic">
            <summary>
                The italic style of the text.
            </summary>
            <remarks>
                The italic appearance is not widely supported.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.TextStyle.Reset">
            <summary>
                Resets the style to white over a black background.
                All other properties are cleared or set to their
                default values.
            </summary>
        </member>
        <member name="P:Thought.Terminals.TextStyle.Reversed">
            <summary>
                The inversed, reversed or negative status of the text.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TextStyle.SetBackground(System.Byte,Thought.Terminals.CgaHighBit)">
            <summary>
                Sets the background based on a CGA color value.
            </summary>
            <param name="cgaBackground">
                The color as a CGA attribute value ranging from 0 to 16.
            </param>
            <param name="highBitMeaning">
                The meaning of the high byte in a four-bit CGA color.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.SetBackground(System.ConsoleColor)">
            <summary>
                Sets the background color and intensity status
                based on a ConsoleColor.
            </summary>
            <param name="consoleColor">
                The background color encoded as a system ConsoleColor.
            </param>
            <remarks>
                The ConsoleColor enumeration encodes both a color and
                its intensity status.  Therefore calling this function
                will set the background intensity to normal or bold.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.TextStyle.SetBackground(Thought.Terminals.TextColor)">
            <summary>
                Changes the background color without impacting any
                other attributes, including the intensity state of
                the background.
            </summary>
            <param name="backgroundColor">
                The new background color.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.SetColor(System.Byte,Thought.Terminals.CgaHighBit)">
            <summary>
                Sets the foreground and background properties based
                on a CGA-encoded color attribute.
            </summary>
            <param name="cgaAttribute">
                A CGA-encoded color attribute.
            </param>
            <param name="highBitMeaning">
                The meaning of the high bit in the CGA attribute.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.SetColor(System.Byte,System.Byte,Thought.Terminals.CgaHighBit)">
            <summary>
                Sets the foreground and background colors based on
                encoded CGA values.
            </summary>
            <param name="cgaForeground">
                The foreground color encoded as a CGA attribute.
            </param>
            <param name="cgaBackground">
                The background color encoded as a CGA attribute.
            </param>
            <param name="highBitMeaning">
                The meaning of the high bit in the CGA background.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.SetForeground(System.Byte)">
            <summary>
                Sets the foreground and intensity based on
                a CGA color attribute.
            </summary>
            <param name="cgaForeground">
                The foreground and intensity based on a CGA
                color attribute.
            </param>
            <remarks>
                A CGA color attribute contains the fourground
                color encoded as bits 0, 1 and 2 of the byte.
                The foreground intensity is normal if bit 3 is
                reset and bold if bit 4 is set.
            </remarks>
        </member>
        <member name="M:Thought.Terminals.TextStyle.SetForeground(System.ConsoleColor)">
            <summary>
                Sets the foreground and intensity based on a
                ConsoleColor value.
            </summary>
            <param name="consoleForeground">
                The foreground and intensity encoded as a 
                system ConsoleColor value.
            </param>
        </member>
        <member name="M:Thought.Terminals.TextStyle.SetForeground(Thought.Terminals.TextColor)">
            <summary>
                Sets the foreground with changing other properties.
            </summary>
            <param name="foregroundColor">
                The new foreground color.
            </param>
            <remarks>
                The intensity of the foreground is not affected.
            </remarks>
        </member>
        <member name="P:Thought.Terminals.TextStyle.StrikeThrough">
            <summary>
                The strikethrough appearance of the text.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TextStyle.ToCgaAttribute(Thought.Terminals.CgaHighBit)">
            <summary>
                Converts the style to a CGA/DOS encoded color attribute.
            </summary>
            <param name="highBitMeaning">
                The intended meaning of the high bit.
            </param>
            <returns>
                A CGA/DOS color attribute.
            </returns>
        </member>
        <member name="P:Thought.Terminals.TextStyle.Underline">
            <summary>
                The underline or underscore appearance of the text.
            </summary>
        </member>
        <member name="M:Thought.Terminals.TextStyle.WithoutBlinking">
            <summary>
                Builds a copy of the current style without any blinking.
            </summary>
            <returns>
                A <see cref="T:Thought.Terminals.TextStyle"/> with the same display properties
                as the current style but with blinking disabled.
            </returns>
        </member>
        <member name="T:Thought.Terminals.TextUnderline">
            <summary>
                The underlining or underscoring appearance of text.
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextUnderline.None">
            <summary>
                No underlining.
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextUnderline.Single">
            <summary>
                Single underline.
            </summary>
        </member>
        <member name="F:Thought.Terminals.TextUnderline.Double">
            <summary>
                Double underline.
            </summary>
        </member>
    </members>
</doc>
